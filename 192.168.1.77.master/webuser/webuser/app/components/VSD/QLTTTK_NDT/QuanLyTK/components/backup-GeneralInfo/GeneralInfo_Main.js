import React from "react";
import { connect } from "react-redux";
import DropdownFactory from "../../../../../utils/DropdownFactory";
import DateInput from "app/utils/input/DateInput";
import FileInput from "app/utils/input/FileInput";
//import NumberFormat from 'react-number-format';
import Select from "react-select";
import flow from "lodash.flow";
import translate from "app/utils/i18n/Translate.js";
//import {checkValidDate} from 'app/Helpers.js';
//import { log } from 'util';
import { showNotifi } from "app/action/actionNotification.js";
import moment from "moment";
import {
  IMGMAXW,
  IMGMAXH,
  CUSTYPE_TC,
  IDTYPE_009,
  COUNTRY_234,
  ACTYPE_TT,
  GRINVESTOR_NN,
  GRINVESTOR_TN
} from "../../../../../Helpers";
import RestfulUtils from "app/utils/RestfulUtils";
import { toast } from "react-toastify";

class GeneralInfo_Main extends React.Component {
  constructor(props) {
    super(props);
    //const dataTam = props.dataTam; // works, but no destructuring
    this.state = {
      hover1 :"",
        hover2 :"",
      // isDisableWhenLoading: false,
      isExistAcc: false,
      optionsDataMG: [],
      showLabelLoaiDKSH: false,
      titlebuttonopenExport: this.props.strings["createxportopenExport"],
      titlebuttoneditExport: this.props.strings["createxporteditExport"],
      titlebuttononlineExport: this.props.strings["createxportonlineExport"],
      disablebuttonopenExport: false,
      disablebuttoneditExport: false,
      disablebuttononlineExport: false,
      checkFields: [
        { name: "FULLNAME", id: "txtFullname" },
        { name: "SEX", id: "drdSex" },
        { name: "COUNTRY", id: "drdCountry" },
        { name: "OTHERCOUNTRY", id: "drdOTHERCountry" },
        //{ name: "TAXNUMBER", id: "txtTAXNUMBER" }, //b·ªè check theo issue FUNDMB CapitalEXT-32
        // { name: "GRINVESTOR", id: "drdGrinvestor" },
        { name: "CUSTTYPE", id: "drdCusttype" },
        { name: "BIRTHDATE", id: "txtBirthdate" },
        { name: "JOB", id: "drdJOB" },
        { name: "WORKADDRESS", id: "txtWORKADDRESS" },
        { name: "TAXNUMBER", id: "txtTAXNUMBER" },
        
        { name: "IDTYPE", id: "drdIdtype" },
        { name: "TRADINGCODE", id: "" },
        { name: "PASSPORT", id: "txtPASSPORT" },
        { name: "PASSPORTDATE", id: "txtPASSPORTDATE" },
        { name: "PASSPORTPLACE", id: "drdPASSPORTPLACE" },
        { name: "TAXPLACE", id: "drdTAXPLACE" },
        { name: "IDCODE", id: "txtIdcode" },
        { name: "IDDATE", id: "txtIddate" },
        // { name: "IDEXPDATED", id: "txtExpiredate" },
        { name: "IDPLACE", id: "txtIdplace" },
        //{ name: "TAXNO", id: "txtTaxno" },
        
        { name: "EMAIL", id: "txtEmail"},
        { name: "MOBILE", id: "txtMobile" },
        { name: "BANKACC", id: "txtBankaccno" },
        { name: "CITYBANK", id: "txtBranchname" },
        { name: "BANKCODE", id: "drdBank" },
        // { name: "ACCTYPE", id: "drdAcctype" },
        { name: "CAREBY", id: "drdCareby" },
        
        // { name: "INVESTTYPE", id: "drdInvesttype" },
        { name: "ACCTGRP", id: "drdAcctgrp" },
        { name: "SALEID", id: "drdsaleid" },
        // { name: "SIGN_IMG", id: "btnSignImg" },
        // { name: "OWNLICENSE_IMG", id: "btnOwnLicenseImg" },
        // { name: "OWNLICENSE2_IMG", id: "btnOwnLicense2Img" },
        // { name: "OWNLICENSE3_IMG", id: "btnOwnLicense3Img" },
        // { name: "OWNLICENSE4_IMG", id: "btnOwnLicense4Img" },
        //{ name: "RCV_EMAIL", id: "cbIsemail" },
        { name: "ISAGREE", id: "cbIsagree" },
        { name: "LRNAME", id: "txtLRNAME" },
        { name: "LRDOB", id: "txtLRDOB" },
        { name: "LRID", id: "txtLRID" },
        { name: "LRIDDATE", id: "txtLRIDDATE" },
        { name: "LRIDPLACE", id: "txtLRIDPLACE" },
        { name: "LRPRIPHONE", id: "txtLRPRIPHONE" },
        { name: "LREMAIL", id: "txtLREMAIL" },
        { name: "INVESTTIME" ,id :"drdINVESTTIME"},
        { name: "RUIRO" ,id :"drdRUIRO"},
        { name: "EXPERIENCE" ,id :"drdEXPERIENCE"},
        { name: "ADDRESS" ,id :"txtADDRESS"},
        // { name: "PHOTHONXOM" ,id :"txtPHOTHONXOM"},
        // { name: "PHUONGXA" ,id :"txtPHUONGXA"},
        // { name: "THANHPHO" ,id :"txtTHANHPHO"},
        { name: "CAPITALNAME" ,id :"txtCAPITALNAME"},
        { name: "CAPITALPOSITION" ,id :"txtCAPITALPOSITION"},
        { name: "CAPITALIDCODE" ,id :"txtCAPITALIDCODE"},
        { name: "CAPITALIDDATE" ,id :"txtCAPITALIDDATE"},
        { name: "CAPITALIDPLACE" ,id :"txtCAPITALIDPLACE"},
        { name: "CAPITALTEL" ,id :"txtCAPITALTEL"},
        { name: "CAPITALEMAIL" ,id :"txtCAPITALEMAIL"},

        { name: "ONLINENAME" ,id :"txtONLINENAME"},
        { name: "ONLINEPHONE" ,id :"txtONLINEPHONE"},
        { name: "ONLINEEMAIL" ,id :"txtONLINEEMAIL"},
      ],
      currentcountry : "234",
      listDrop:{
        JOB :[],
        RUIRO:[],
        INVESTTIME :[],
        EXPERIENCE:[],
      },
      generalInformation: {
        CUSTID: "",
        CUSTODYCD: "",
        FULLNAME: "",
        ACCTYPE: "TT",
        CUSTTYPE: "CN",
        GRINVESTOR: "TN",
        SEX: "",
        BIRTHDATE: "",
        IDTYPE: "",
        IDCODE: "",
        IDDATE: "",
        IDPLACE: "",
        TAXNO: "",        
        COUNTRY: "234",
        OTHERCOUNTRY: "",
        PHONE: "",
        MOBILE: "",
        EMAIL: "",
        DBCODE:"",
        BANKACC: "",
        BANKCODE: "",
        CITYBANK: "",
        BANKACNAME: "",
        FAX: "",
        INCOMEYEAR: "",
        ISAUTH: 'N',        
        TRADINGCODE: "",
        PASSPORT :"",
        PASSPORTDATE:"",
        PASSPORTPLACE:"",
        TAXPLACE :"",
        CAREBY: "",
        INVESTTYPE: "TT",
        IDEXPDATED: "",
        ISONLINE: 'N',
        ISCONTACT: 'N',
        SALEID: "",
        ISFATCA: 'N',
          // SIGN_IMG: "",
          // OWNLICENSE_IMG: "",
          // OWNLICENSE2_IMG: "",
          // OWNLICENSE3_IMG: "",
          // OWNLICENSE4_IMG: "",
          ISAGREE: 'N',
        ISPEP  : "N",
        // MGDCK :"Y",
        FAMILYNAME1 :"",        
        FAMILYNAME2 :"",
        NAME1 :"",
        NAME2 :"",
        // ISOTP: ""
        ISREPRESENTATIVE :"N",
        LRNAME :"",
        LRSEX : "",
        LRDOB :"",
        LRCOUNTRY :"234",
        LRPOSITION :"",
        LRDECISIONNO :"",
        LRID :"",
        LRIDDATE :"",
        LRIDPLACE :"",
        LRADDRESS :"",
        LRCONTACT :"",
        LRPRIPHONE :"",
        LRALTPHONE :"",
        LRFAX :"",
        LREMAIL :"",
        SONHA: "",
        PHOTHONXOM: "",
        PHUONGXA: "",
        THANHPHO: "",
        INVESTTIME:"",
        RUIRO:"",
        EXPERIENCE:"",
        ISAGREESHARE:true,
        // ------batch2----------
        TAXNUMBER:"",
        SONHAREG:"",
        PHOTHONXOMREG :"",
        PHUONGXAREG :"",
        THANHPHOREG:"",
        JOB:"",
        POSITIONCN:"",
        WORKADDRESS:"",
        VISANO:"",
        LIDONHAPCANH:"",
        CAPITALNAME:"",
        CAPITALPOSITION:"",
        CAPITALIDCODE:"",
        CAPITALIDDATE:"",
        CAPITALIDPLACE:"",
        CAPITALTEL:"",
        CAPITALEMAIL:"",
        ONLINENAME:"",
        ONLINEPHONE:"",
        ONLINEEMAIL:"",
        REGADDRESS:"",
        ADDRESS:""

      },
      CUSTODYCD:"",
      LANGUAGE:"",
      oldInforBeforeChange: {
      }
    };
  }
  handleMouseIn1() {
    this.setState({ hover1: true })
  }

  handleMouseOut1() {
    this.setState({ hover1: false })
  }
  handleMouseIn2() {
    this.setState({ hover2: true })
  }

  handleMouseOut2() {
    this.setState({ hover2: false })
  }
  checkValid(name, id) {
    let value = this.state.generalInformation[name];
    let mssgerr = "";
    const { user } = this.props.auth;
    let logic1 = true;
    let logicTKNH=true;
    let logicSDT=true;
    let logicCMND=true;
    let logicONLINEEMAIL= true;
    let logicCAPITALEMAIL= true;
    let ISCN = this.state.generalInformation.CUSTTYPE == "CN";
    let logic = (/^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$/i).test(this.state.generalInformation.EMAIL);
    
    let ISCUSTOMER1 = user;
    let ISLOGIN = ISCUSTOMER1 != '' && ISCUSTOMER1 != undefined;

    if (this.state.generalInformation["CUSTTYPE"] == 'TC'){
      logic1 = (/^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$/i).test(this.state.generalInformation.LREMAIL);
      logicTKNH =(/^[a-zA-Z0-9]*$/gm).test(this.state.generalInformation.BANKACC);
      logicSDT=(/^[a-zA-Z0-9]*$/gm).test(this.state.generalInformation.MOBILE);
      logicCMND=(/^[a-zA-Z0-9]*$/gm).test(this.state.generalInformation.IDCODE);
      logicCAPITALEMAIL = (/^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$/i).test(this.state.generalInformation.CAPITALEMAIL);
      
      logicONLINEEMAIL=(/^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$/i).test(this.state.generalInformation.ONLINEEMAIL);
     
    }
    else if(this.state.generalInformation["CUSTTYPE"]== 'CN'){
      logicTKNH =(/^[a-zA-Z0-9]*$/gm).test(this.state.generalInformation.BANKACC);
      logicSDT=(/^[a-zA-Z0-9]*$/gm).test(this.state.generalInformation.MOBILE);
      logicCMND=(/^[a-zA-Z0-9]*$/gm).test(this.state.generalInformation.IDCODE);

    }
    else {
      logic1 = logic1;
      logicTKNH = logicTKNH;
      logicSDT=logicSDT;
      logicCMND=logicCMND;
      logicONLINEEMAIL= logicONLINEEMAIL;
      logicCAPITALEMAIL = logicCAPITALEMAIL;
    
    }
    let  ISCUSTOMER= user?user.ISCUSTOMER ? user.ISCUSTOMER == "Y"? true: false:false:false;
    switch (name) {
      case "FULLNAME":
        if (value == "") mssgerr = this.props.strings.requiredFullname;
        break;
      case "SEX":
        if (ISCN && value == "") mssgerr = this.props.strings.requiredSex;
        break;
      case "COUNTRY":
        if (value == "") mssgerr = this.props.strings.requiredCountry;
        break;
      case "JOB":
        if (this.state.generalInformation["CUSTTYPE"] == 'CN' && this.state.generalInformation["COUNTRY"] == '234' && value == "") mssgerr = this.props.strings.requiredJOB;
        break;
      case "WORKADDRESS":
        if (this.state.generalInformation["CUSTTYPE"] == 'CN' && this.state.generalInformation["COUNTRY"] == '234' && value == "") mssgerr = this.props.strings.requiredWorkAddress;
        break;
        case "TAXNUMBER":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredTAXNUMBER;
        break;
      // case "OTHERCOUNTRY":
      //   if (value == "") mssgerr = this.props.strings.requiredCountry;
      //   break;
      // case "GRINVESTOR":
      //   if (value == "") mssgerr = this.props.strings.requiredGrinvestor;
      //   break;
      case "CUSTTYPE":
        if (value == "") mssgerr = this.props.strings.requiredCustype;
        break;
      // case "TAXNO":
      //   if (
      //     this.state.generalInformation["CUSTTYPE"] == CUSTYPE_TC &&
      //     value == ""
      //   )
      //     mssgerr = this.props.strings.requiredTaxno;
      //   break;
      case "BIRTHDATE":
        if (this.state.generalInformation["CUSTTYPE"] == 'CN' && value == "") mssgerr = this.props.strings.requiredBirthdate;

        break;
      case "IDTYPE":
        if (value == "") mssgerr = this.props.strings.requiredIdtype;
        break;
      case "PASSPORT":
        if (
          ISCN && this.state.generalInformation.COUNTRY != COUNTRY_234  && value == ""
        )
          mssgerr = this.props.strings.requiredTradingcode;
        break;
        case "PASSPORTDATE":
        if (
          ISCN && this.state.generalInformation.COUNTRY != COUNTRY_234  && value == ""
        )
          mssgerr = this.props.strings.requiredPASSPORTDATE;
        break;
        case "PASSPORTPLACE":
        if (
          ISCN && this.state.generalInformation.COUNTRY != COUNTRY_234  && value == ""
        )
          mssgerr = this.props.strings.requiredPASSPORTPLACE;
        break;
      case "LRPRIPHONE":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' &&  value == "") mssgerr = this.props.strings.requiredPRIPHONE;
        break;
      case "IDCODE":
        if (value == "") {mssgerr = this.props.strings.requiredIdcode;}
        else if(this.state.generalInformation["CUSTTYPE"] == 'CN' && !logicCMND){
          mssgerr = this.props.strings.invalidspace;
        }
        break;
      case "IDDATE":
        if (value == "") mssgerr = this.props.strings.requiredIddate;
        if (
          moment(value, "DD/MM/YYYY") <=
          moment(this.state.generalInformation.BIRTHDATE, "DD/MM/YYYY")
        )
          mssgerr = this.props.strings.invalidIddate;
        break;
        case "IDPLACE":
        if (value == "") mssgerr = this.props.strings.requiredIdplace;
        break;
      case "IDEXPDATED":
        if (value == "") mssgerr = this.props.strings.requiredexpiredate;
        break;
      case "SALEID":
        if (ISLOGIN && value == "") mssgerr = this.props.strings.requiredSALEID;
        break;    
        // case "SONHA":
        // if (value == "") mssgerr = this.props.strings.requiredSONHA;
        // break;
        // case "PHOTHONXOM":
        // if (value == "") mssgerr = this.props.strings.requiredPHOTHONXOM;
        // break;
        // case "PHUONGXA":
        // if (value == "") mssgerr = this.props.strings.requiredPHUONGXA;
        // break;
        // case "THANHPHO":
        // if (value == "") mssgerr = this.props.strings.requiredTHANHPHO;
        // break;
        case "ADDRESS":
        if (value == "") mssgerr = this.props.strings.requiredAddress;
        break;
      case "EMAIL":
        if (value == " "  ) {
          mssgerr = this.props.strings.invalidEmail;
        }
        else if (!logic) {
          mssgerr = this.props.strings.wrongemail;
        }          
        break;
      
      // case "REGADDRESS":
      //   if (ISCN && value == "") mssgerr = this.props.strings.requiredRegaddress
      //   else if (!ISCN && value == "") mssgerr = this.props.strings.requiredRegaddressTC;
      //   break;
      
      // case "ADDRESS":
      //    if (value == "") mssgerr = this.props.strings.requiredAddress;
      // break;
      
      case "MOBILE":
        if (value == "" && this.state.generalInformation.ISONLINE == 'Y')
         { mssgerr = this.props.strings.requiredMobile;}
         else if(!logicSDT){
           mssgerr = this.props.strings.invalidspace;
         }
        break;
      case "BANKACC":
        if (value == "") {mssgerr = this.props.strings.requiredBankAcc;}
        else if (!logicTKNH){
          mssgerr=this.props.strings.invalidspace;
        }
        break;
      case "CITYBANK":
        if (value == "") mssgerr = this.props.strings.requiredCitybank;
        break;
      case "BANKCODE":
        if (value == "") mssgerr = this.props.strings.requiredBankCode;
        break;
      case "ACCTYPE":
        if (value == "") mssgerr = this.props.strings.requiredActype;
        break;
      case "CAREBY":
        if (user && value == "" && !ISCUSTOMER) 
          mssgerr = this.props.strings.requiredCareby;
        break;
      // case "SALEID":
      //   if (user && value == "" && !ISCUSTOMER)
      //     mssgerr = this.props.strings.requiredSaleid;
      //   break;
      // case "SIGN_IMG":
      //   if (value == "") mssgerr = this.props.strings.requiredSignImg;
      //   break; 
      case "INVESTTYPE":
        if (value == "") mssgerr = this.props.strings.requiredInvesttype;
        break;
        case "INVESTTIME":
        if (value == "") mssgerr = this.props.strings.requiredINVESTTIME;
        break;
        case "RUIRO":
        if (value == "") mssgerr = this.props.strings.requiredRUIRO;
        break;
        case "EXPERIENCE":
        if (value == "") mssgerr = this.props.strings.requiredEXPERIENCE;
        break;
      case "ACCTGRP":
        if (value == "") mssgerr = this.props.strings.requiredAcctgrp;
        break;
        case "LRNAME":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredLRNAME;
        break;
        case "LRDOB":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredLRDOB;
        break;
        case "LRID":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredLRID;
        break;
        case "LRIDDATE":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredLRIDDATE;
        break;
        case "LRIDPLACE":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredLRIDPLACE;
        break;
        case "LREMAIL":

          if (this.state.generalInformation["CUSTTYPE"] == 'TC' &&  value == ""  ) {
            mssgerr = this.props.strings.invalidLREmail;
          }
          else if (this.state.generalInformation["CUSTTYPE"] == 'TC' && !logic1) {
            mssgerr = this.props.strings.LRwrongemail;
          }
            break;
        case "CAPITALNAME":
            if (this.state.generalInformation["CUSTTYPE"] == 'TC' && this.state.generalInformation["CAPITALNAME"]== "")
             { 
               mssgerr = this.props.strings.requiredCAPITALNAME;
              }
            break;
            case "CAPITALPOSITION":
            if (this.state.generalInformation["CUSTTYPE"] == 'TC' && this.state.generalInformation["CAPITALPOSITION"]== "")
             { 
               mssgerr = this.props.strings.requiredCAPITALPOSITION;
              }
            break;
            case "CAPITALIDCODE":
            if (this.state.generalInformation["CUSTTYPE"] == 'TC' && this.state.generalInformation["CAPITALIDCODE"]== "")
             { 
               mssgerr = this.props.strings.requiredCAPITALIDCODE;
              }
            break;
            case "CAPITALIDDATE":
            if (this.state.generalInformation["CUSTTYPE"] == 'TC' && this.state.generalInformation["CAPITALIDDATE"]== "")
             { 
               mssgerr = this.props.strings.requiredCAPITALIDDATE;
              }
            break;

            case "CAPITALIDPLACE":
            if (this.state.generalInformation["CUSTTYPE"] == 'TC' && this.state.generalInformation["CAPITALIDPLACE"]== "")
             { 
               mssgerr = this.props.strings.requiredCAPITALIDPLACE;
              }
            break;
            case "CAPITALTEL":
            if (this.state.generalInformation["CUSTTYPE"] == 'TC' && this.state.generalInformation["CAPITALTEL"]== "")
             { 
               mssgerr = this.props.strings.requiredCAPITALTEL;
              }
            break;
            case "CAPITALEMAIL":
            if (this.state.generalInformation["CUSTTYPE"] == 'TC' && this.state.generalInformation["CAPITALEMAIL"]== "")
             { 
               mssgerr = this.props.strings.requiredCAPITALEMAIL;
              }
              else if (this.state.generalInformation["CUSTTYPE"] == 'TC' && !logicCAPITALEMAIL) {
                mssgerr = this.props.strings.CAPwrongemail;
              }
            break;
      // case "OWNLICENSE_IMG":
      //   if (value == "") mssgerr = this.props.strings.requiredOwnLicenseImg;
      //   break;
      // case "OWNLICENSE2_IMG":
      //   if (value == "") mssgerr = this.props.strings.requiredOwnLicense2Img;
      //   break;
      // case "OWNLICENSE3_IMG":
      //   if (
      //     value == "" &&
      //     this.state.generalInformation["COUNTRY"] !== COUNTRY_234 
      //     && this.state.generalInformation["OTHERCOUNTRY"] !== COUNTRY_234 
      //   )
      //     mssgerr = this.props.strings.requiredOwnLicense3Img;
      //   break;
      // case "OWNLICENSE4_IMG":
      //   if (
      //     value == "" &&
      //     this.state.generalInformation["COUNTRY"] !== COUNTRY_234
      //     && this.state.generalInformation["OTHERCOUNTRY"] !== COUNTRY_234 
      //   )
      //     mssgerr = this.props.strings.requiredOwnLicense4Img;
      //   break;
      // case "RCV_EMAIL":
      //   if (
      //     value == false &&
      //     this.state.generalInformation["RCV_SMS"] == false &&
      //     this.state.generalInformation["RCV_MAIL"] == false
      //   )
      //     mssgerr = this.props.strings.requiredReportMethod;
      //   else if (
      //     value == true &&
      //     this.state.generalInformation["EMAIL"] == ""
      //   ) {
      //     mssgerr = this.props.strings.requiredEmail;
      //     id = "txtEmail";
      //   }
      //   break;
        // case "CAPITALEMAIL":        
        //  if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value !== '' && !logicCAPITALEMAIL) {
        //   mssgerr = this.props.strings.CAPwrongemail;
        // }
        break;
        case "ONLINENAME":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredONLINENAME;
        break;
        case "ONLINEEMAIL":        
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == ""){ 
          mssgerr = this.props.strings.requiredONLINEEMAIL;
        }
        else if (this.state.generalInformation["CUSTTYPE"] == 'TC' && !logicONLINEEMAIL) {
          mssgerr = this.props.strings.OLwrongemail;
        }
        break;
        case "ONLINEPHONE":
        if (this.state.generalInformation["CUSTTYPE"] == 'TC' && value == "") mssgerr = this.props.strings.requiredONLINEPHONE;
        break;
      case "ISAGREE":
        if (value =='N' || !value ) mssgerr = this.props.strings.requiredAgree;
      default:
        break;
        
    }
    if (mssgerr !== "") {
      var { dispatch } = this.props;
      var datanotify = {
        type: "",
        header: "",
        content: ""
      };
      datanotify.type = "error";
      datanotify.content = mssgerr;
      dispatch(showNotifi(datanotify));
      window.$(`#${id}`).focus();
    }
    return mssgerr;
  }
  async onSetDefaultValue(type, value) {
    if (!this.state.generalInformation[type]) {
      if (type == "BANKCODE") {
        let that = this;
        await RestfulUtils.post("/account/getbankbranch", {
          mbid: value,
          language: this.props.language
        }).then(res => {
          that.setState({
            ...that.state,
            optionsDataCN: res.result
          });
        });
        this.state.generalInformation[type] = value;
      }
  
      if (type == "COUNTRY") {
        //let that = this
        await RestfulUtils.post("/account/getidtype", {
          action: this.props.access,
          custtype: this.state.generalInformation.CUSTTYPE,
          grinvestor: this.state.generalInformation.GRINVESTOR,
          country : this.state.generalInformation.COUNTRY,
          language: this.props.language
        }).then(res => {
          if (res) {
            this.setState({
              ...this.state,
              optionsIdType: res.result,
              generalInformation: {
                ...this.state.generalInformation,
                //IDTYPE: res.result[0].value
              }
            });
          }
        });
        this.state.generalInformation[type] = value;
      } else {
        this.state.generalInformation[type] = value;
      }
    }
  }
  
async getOptionsMaMoGioi(input) {

    return { options: this.state.optionsDataMG }

}
async getOptionsAsync(input) {

  return { options: this.state.listDrop[input] }

}
  async onSubmit() {
    let {user} = this.props.auth;
    let {oldInforBeforeChange , generalInformation} = this.state;
    generalInformation.DBCODE = !user ? '': user.DBCODE ? user.DBCODE :'';
    let isConfirm = ((oldInforBeforeChange.IDCODE == generalInformation.IDCODE) 
    && (oldInforBeforeChange.IDDATE == generalInformation.IDDATE) 
    && (oldInforBeforeChange.IDEXPDATED == generalInformation.IDEXPDATED) 
    && (oldInforBeforeChange.IDPLACE == generalInformation.IDPLACE) 
    && (oldInforBeforeChange.TRADINGCODE == generalInformation.TRADINGCODE) 
    && (oldInforBeforeChange.PASSPORT == generalInformation.PASSPORT) 
    && (oldInforBeforeChange.PASSPORTPLACE == generalInformation.PASSPORTPLACE) 
    && (oldInforBeforeChange.PASSPORTDATE == generalInformation.PASSPORTDATE) 
    && (oldInforBeforeChange.TAXPLACE == generalInformation.TAXPLACE) 
    && (oldInforBeforeChange.TAXNO == generalInformation.TAXNO) 
    && (oldInforBeforeChange.EMAIL == generalInformation.EMAIL) 
    && (oldInforBeforeChange.MOBILE == generalInformation.MOBILE) 
    && (oldInforBeforeChange.BANKACC == generalInformation.BANKACC) 
    && (oldInforBeforeChange.BANKCODE == generalInformation.BANKCODE) 
    && (oldInforBeforeChange.BANKCODE == generalInformation.BANKCODE) 
    && (oldInforBeforeChange.CITYBANK == generalInformation.CITYBANK) 
    // && (oldInforBeforeChange.SIGN_IMG == generalInformation.SIGN_IMG) 
    // && (oldInforBeforeChange.OWNLICENSE_IMG == generalInformation.OWNLICENSE_IMG) 
    // && (oldInforBeforeChange.OWNLICENSE2_IMG == generalInformation.OWNLICENSE2_IMG)
    ) ? false :true;
   var mssgerr = "";
    for (let index = 0; index < this.state.checkFields.length; index++) {
      const element = this.state.checkFields[index];
      mssgerr = this.checkValid(element.name, element.id);
      if (mssgerr !== "") break;
    }
    //generalInformation.DBCODE = user.DBCODE;
    if (mssgerr == "") {
     
      await this.props.isConfirm(isConfirm);
      await this.props.onSubmit(generalInformation);
    }
  }
  async onChange(type, event) {
    if (event.target) {
      if (event.target.type == "checkbox") {
        
        if(event.target.checked == false){
          this.state.generalInformation[type] = 'N';
          if (type == 'ISAGREESHARE'){
            this.state.generalInformation[type] = false;
          }
          
        }
        else{
          this.state.generalInformation[type] = 'Y';
          if (type == 'ISAGREESHARE'){
            this.state.generalInformation[type] = true;
          }
        }        
        this.setState({generalInformation:this.state.generalInformation})
        
      } else {
        this.state.generalInformation[type] = event.target.value;
      }
    } else {
      if (type == "BANKCODE") {
        let that = this;
        RestfulUtils.post("/account/getbankbranch", {
          mbid: event.value,
          language: this.props.language
        }).then(res => {
          that.setState({
            ...that.state,
            optionsDataCN: res.result
          });
        });
      }
      // if(type=='IDTYPE'){
      //   this.checkOldAcc(event.value,this.state.generalInformation.IDCODE);
      // }
     
      if (type == "IDDATE") {
        var arrResultDate = event.value.split("/");
        var newyear = parseInt(arrResultDate[2]) + 15;
        this.state.generalInformation.IDEXPDATED =
          arrResultDate[0] + "/" + arrResultDate[1] + "/" + newyear;
      } else if (type == "IDCODE" && this.props.access == "add") {
        this.checkOldAcc(
          this.state.generalInformation.IDTYPE,
          event.target.value
        );
      } else if (type == "GRINVESTOR") {
        //this.getOptionsIdType(this.state.generalInformation.CUSTTYPE, event.value)
      }
      else if (type == "COUNTRY") {
       if (event.value == COUNTRY_234) {
         this.state.generalInformation["GRINVESTOR"] = GRINVESTOR_TN;
          window.$("#drdIdtype").prop("disabled", false);
          this.state.generalInformation[type] = event.value;
        } else {
          this.state.generalInformation["GRINVESTOR"] = GRINVESTOR_NN;
          //this.state.generalInformation["IDTYPE"]=IDTYPE_009;
          window.$("#drdIdtype").prop("disabled", true);
          this.state.generalInformation[type] = event.value;
          this.state.currentcountry = event.value;
          this.state.showLabelLoaiDKSH = true;
        }
        //lay ds idtype
        await RestfulUtils.post("/account/getidtype", {
          action: this.props.access,
          custtype: this.state.generalInformation.CUSTTYPE,
          grinvestor: this.state.generalInformation.GRINVESTOR,
          country : this.state.generalInformation.COUNTRY,
          language: this.props.language
        }).then(res => {
          if (res) {
            this.setState({
              ...this.state,
              optionsIdType: res.result,
              generalInformation: {
                ...this.state.generalInformation,
                IDTYPE: res.result[0].value
              }
            });
          }
        });
      }
      else if (type == "CUSTTYPE") {
        let a = '';

        if(this.state.generalInformation.COUNTRY == '234')
        {
          a= 'TN';
        }
        else {
          a = 'NN';
        }
        let b = this.state.currentcountry;
        await RestfulUtils.post("/account/getidtype", {
          action: this.props.access,
          custtype: event.value,
          grinvestor: a,
          country : this.state.currentcountry,
          language: this.props.language
        }).then(res => {
          // gan mac dinh lay kq dau tien
          if (res) {
            // tuy chinh theo truong hop them se luon mac dinh lay kq dau tien
            if (this.props.access == "add") {
              if (event.value == 'CN'){
                this.setState({...this.state,generalInformation: {...this.state.generalInformation,ISAUTH : 'N',ISPEP : 'N',ISREPRESENTATIVE :'N', COUNTRY :b}});
              
              }
              else {
                this.setState({...this.state,generalInformation: {...this.state.generalInformation,ISAUTH : 'N',ISPEP : 'N',ISREPRESENTATIVE :'Y',COUNTRY :b}});

              }
              this.setState({
                ...this.state,
                optionsIdType: res.result,
                generalInformation: {
                  ...this.state.generalInformation,
                  IDTYPE: res.result[0].value
                  
                }
              });
            
            } else {
              if (this.state.generalInformation.COUNTRY == COUNTRY_234) {
                if (event.value == "CN") {
                  this.setState({
                    ...this.state,
                    optionsIdType: res.result,
                    generalInformation: {
                      ...this.state.generalInformation,
                      IDTYPE: res.result[0].value
                    }
                  });
                } else {
                  this.setState({
                    ...this.state,
                    optionsIdType: res.result,
                    generalInformation: {
                      ...this.state.generalInformation,
                      IDTYPE: res.result[4].value
                    }
                  });
                }
              } else {
                this.setState({
                  ...this.state,
                  optionsIdType: res.result,
                  generalInformation: {
                    ...this.state.generalInformation,
                    IDTYPE: res.result[5].value
                  }
                });
              }
            }
          }
        });
      } 
      this.state.generalInformation[type] = event.value;
    }
    this.setState({
      generalInformation: this.state.generalInformation
    });
  }
  async getOptionsCN(input) {
    return await { options: this.state.optionsDataCN };
  }
  async getOptionsIdType(custtype, grinvestor) {
    return await { options: this.state.optionsIdType };
  }
  async getOptionsSaleid() {
    return await { options: this.state.optionsSaleid };
  }
  async onChangeCN(e) {
    if (e && e.value) {
      this.state.generalInformation["CITYBANK"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["CITYBANK"] = "";
      this.setState(this.state);
    }
  }
  _handleSIGNIMGChange = e => {
    e.preventDefault();
    let that = this;
    let reader = new FileReader();
    let file = e.target.files[0];

    reader.onloadend = () => {
      var tempImg = new Image();
      tempImg.src = reader.result;
      tempImg.onload = function() {
        var MAX_WIDTH = IMGMAXW;
        var MAX_HEIGHT = IMGMAXH;
        var tempW = tempImg.width;
        var tempH = tempImg.height;
        if (tempW > tempH) {
          if (tempW > MAX_WIDTH) {
            tempH *= MAX_WIDTH / tempW;
            tempW = MAX_WIDTH;
          }
        } else {
          if (tempH > MAX_HEIGHT) {
            tempW *= MAX_HEIGHT / tempH;
            tempH = MAX_HEIGHT;
          }
        }

        var canvas = document.createElement("canvas");
        canvas.width = tempW;
        canvas.height = tempH;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(this, 0, 0, tempW, tempH);
        var dataURL = canvas.toDataURL("image/png");
        that.state.generalInformation.SIGN_IMG = dataURL;
        that.setState(that.state);
      };
    };

    reader.readAsDataURL(file);
  };
  _handleOWNLICENSEIMGChange = e => {
    e.preventDefault();

    let that = this;
    let reader = new FileReader();
    let file = e.target.files[0];

    reader.onloadend = () => {
      var tempImg = new Image();
      tempImg.src = reader.result;
      tempImg.onload = function() {
        var MAX_WIDTH = IMGMAXW;
        var MAX_HEIGHT = IMGMAXH;
        var tempW = tempImg.width;
        var tempH = tempImg.height;
        if (tempW > tempH) {
          if (tempW > MAX_WIDTH) {
            tempH *= MAX_WIDTH / tempW;
            tempW = MAX_WIDTH;
          }
        } else {
          if (tempH > MAX_HEIGHT) {
            tempW *= MAX_HEIGHT / tempH;
            tempH = MAX_HEIGHT;
          }
        }

        var canvas = document.createElement("canvas");
        canvas.width = tempW;
        canvas.height = tempH;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(this, 0, 0, tempW, tempH);
        var dataURL = canvas.toDataURL("image/png");
        that.state.generalInformation.OWNLICENSE_IMG = dataURL;
        that.setState(that.state);
      };
    };

    reader.readAsDataURL(file);
  };
  _handleOWNLICENSE2IMGChange = e => {
    e.preventDefault();

    let that = this;
    let reader = new FileReader();
    let file = e.target.files[0];

    reader.onloadend = () => {
      var tempImg = new Image();
      tempImg.src = reader.result;
      tempImg.onload = function() {
        var MAX_WIDTH = IMGMAXW;
        var MAX_HEIGHT = IMGMAXH;
        var tempW = tempImg.width;
        var tempH = tempImg.height;
        if (tempW > tempH) {
          if (tempW > MAX_WIDTH) {
            tempH *= MAX_WIDTH / tempW;
            tempW = MAX_WIDTH;
          }
        } else {
          if (tempH > MAX_HEIGHT) {
            tempW *= MAX_HEIGHT / tempH;
            tempH = MAX_HEIGHT;
          }
        }

        var canvas = document.createElement("canvas");
        canvas.width = tempW;
        canvas.height = tempH;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(this, 0, 0, tempW, tempH);
        var dataURL = canvas.toDataURL("image/png");
        that.state.generalInformation.OWNLICENSE2_IMG = dataURL;
        that.setState(that.state);
      };
    };

    reader.readAsDataURL(file);
  };
  _handleOWNLICENSE3IMGChange = e => {
    e.preventDefault();

    let that = this;
    let reader = new FileReader();
    let file = e.target.files[0];

    reader.onloadend = () => {
      var tempImg = new Image();
      tempImg.src = reader.result;
      tempImg.onload = function() {
        var MAX_WIDTH = IMGMAXW;
        var MAX_HEIGHT = IMGMAXH;
        var tempW = tempImg.width;
        var tempH = tempImg.height;
        if (tempW > tempH) {
          if (tempW > MAX_WIDTH) {
            tempH *= MAX_WIDTH / tempW;
            tempW = MAX_WIDTH;
          }
        } else {
          if (tempH > MAX_HEIGHT) {
            tempW *= MAX_HEIGHT / tempH;
            tempH = MAX_HEIGHT;
          }
        }

        var canvas = document.createElement("canvas");
        canvas.width = tempW;
        canvas.height = tempH;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(this, 0, 0, tempW, tempH);
        var dataURL = canvas.toDataURL("image/png");
        that.state.generalInformation.OWNLICENSE3_IMG = dataURL;
        that.setState(that.state);
      };
    };

    reader.readAsDataURL(file);
  };
  _handleOWNLICENSE4IMGChange = e => {
    e.preventDefault();

    let that = this;
    let reader = new FileReader();
    let file = e.target.files[0];

    reader.onloadend = () => {
      var tempImg = new Image();
      tempImg.src = reader.result;
      tempImg.onload = function() {
        var MAX_WIDTH = IMGMAXW;
        var MAX_HEIGHT = IMGMAXH;
        var tempW = tempImg.width;
        var tempH = tempImg.height;
        if (tempW > tempH) {
          if (tempW > MAX_WIDTH) {
            tempH *= MAX_WIDTH / tempW;
            tempW = MAX_WIDTH;
          }
        } else {
          if (tempH > MAX_HEIGHT) {
            tempW *= MAX_HEIGHT / tempH;
            tempH = MAX_HEIGHT;
          }
        }

        var canvas = document.createElement("canvas");
        canvas.width = tempW;
        canvas.height = tempH;
        var ctx = canvas.getContext("2d");
        ctx.drawImage(this, 0, 0, tempW, tempH);
        var dataURL = canvas.toDataURL("image/png");
        that.state.generalInformation.OWNLICENSE4_IMG = dataURL;
        that.setState(that.state);
      };
    };

    reader.readAsDataURL(file);
  };
  getCfmastInfo (CUSTODYCD,OBJNAME) {
    let tmp = {}
    RestfulUtils.post('/account/getcfmastinfo', { language: this.props.language, custodycd: CUSTODYCD, OBJNAME: OBJNAME })
        .then((res) => {
           
          if (res.EC == 0) {
                tmp = res.DT.dataMain
                this.setState({ oldInforBeforeChange: tmp })
            } 

        })
        
}
  async componentWillReceiveProps(nextProps) {
    console.log('componentWillReceiveProps:', nextProps)
    let self= this
    let CUSTODYCD = nextProps.CfmastInfo?nextProps.CfmastInfo.DT.dataMain.CUSTODYCD?nextProps.CfmastInfo.DT.dataMain.CUSTODYCD:"":""
    let LANGUAGE = this.props.language?this.props.language:"vie"
    console.log('window.location:::',window.location)
    self.getOptionsJOB();
    self.getOptionsRUIRO();
    self.getOptionsEXPERIENCE();
    self.getOptionsINVESTTIME();
    if(nextProps.CfmastInfo){
      this.getCfmastInfo(nextProps.CfmastInfo.DT.dataMain.CUSTODYCD , nextProps.OBJNAME);
    }
    let optionsDataMG= [];
    if (nextProps.access !== "add") {
      if (CUSTODYCD && this.state.CUSTODYCD!= CUSTODYCD || LANGUAGE!= this.state.LANGUAGE) {
        this.setState({CUSTODYCD: CUSTODYCD, LANGUAGE: LANGUAGE })
        let a ={};
        let oldInfor = nextProps.CfmastInfo.DT.dataMain;
        let custid = oldInfor.CUSTID;
        await RestfulUtils.post("/account/getcfmastbycustid", {
          custid: custid,
          //OBJNAME: this.props.OBJNAME,
          language: this.props.language
        }).then(res => {
          a = {...res.DT[0]};
        });
        oldInfor = {...a};
        if (oldInfor) {
         await RestfulUtils.post('/user/getListSaleidByTLID', { language: this.props.language })
        .then((res) => {
             optionsDataMG = res.result
             let i = 0;
             for (i = 0; i< optionsDataMG.length; i ++){
               if (oldInfor.SALEID == optionsDataMG[i].value){
                oldInfor.SALEID = optionsDataMG[i];
               }
             }

        })
          if (this.props.isLoadChiNhanh) {
            
            await RestfulUtils.post("/account/getbankbranch", {
              mbid: oldInfor.BANKCODE,
              language: this.props.language
            }).then(res => {
              self.setState({
                ...self.state,
                optionsDataCN: res.result
              });
            });
          }
          await RestfulUtils.post("/account/getidtype", {
            action: this.props.access,
            custtype: oldInfor.CUSTTYPE,
            grinvestor: this.state.generalInformation.GRINVESTOR,
            country : oldInfor.COUNTRY,
            language: this.props.language
          }).then(res => {

            self.setState({
              ...self.state,
              optionsIdType: res.result,
              generalInformation: {
                ...self.state.generalInformation,
                IDTYPE: res.result[0].value
              }
            });
          });
          if (nextProps.access == "view" || nextProps.access == "update") {
            oldInfor.ISAGREE = 'Y';
            window.$("#cbIsagree").prop("checked", true);
            await RestfulUtils.post("/account/getbankbranch", {
              mbid: oldInfor.BANKCODE,
              language: this.props.language
            }).then(res => {
              self.setState({
                ...self.state,
                optionsDataCN: res.result
              });
            });
          } else {
            oldInfor.ISAGREE = 'N';
            window.$("#cbIsagree").prop("checked", false);
          }
          // if (oldInfor.ISAUTH) window.$("#cbIsauth").prop("checked", true);
          if (oldInfor.ISONLINE == 'Y' || oldInfor.ISONLINE == true) {
            oldInfor.ISONLINE = 'Y';
            window.$("#cbISONL").prop("checked", true);
          } else {
            oldInfor.ISONLINE = 'N';
            window.$("#cbISONL").prop("checked", false);
          }
          if (oldInfor.ISAGREESHARE == 'Y' || oldInfor.ISAGREESHARE == true) {
            oldInfor.ISAGREESHARE = true;
            window.$("#cbISAGREESHARE").prop("checked", true);
          } else {
            oldInfor.ISAGREESHARE = false;
            window.$("#cbISAGREESHARE").prop("checked", false);
          }
          if (oldInfor.ISAUTH == 'Y' || oldInfor.ISAUTH == true) {
            oldInfor.ISAUTH = 'Y';
            window.$("#cbIsauth").prop("checked", true);
          } else {
            oldInfor.ISAUTH = 'N';
            window.$("#cbIsauth").prop("checked", false);
          }
          if (oldInfor.ISFATCA == 'Y' || oldInfor.ISFATCA == true) {
            oldInfor.ISFATCA = 'Y';
            window.$("#cbISFATCA").prop("checked", true);
          } else {
            oldInfor.ISFATCA = 'N';
            window.$("#cbISFATCA").prop("checked", false);
          }
          if (oldInfor.ISCONTACT =='Y' || oldInfor.ISCONTACT == true) {
            oldInfor.ISCONTACT = 'Y';
            window.$("#cbIsHaveInfoContact").prop("checked", true);
          } else {
            oldInfor.ISCONTACT = 'N';
            window.$("#cbIsHaveInfoContact").prop("checked", false);
          }
          // if (oldInfor.RCV_EMAIL) window.$("#cbIsemail").prop("checked", true);
          // if (oldInfor.RCV_SMS) window.$("#cbIssms").prop("checked", true);
          // if (oldInfor.RCV_MAIL) window.$("#cbIsmanual").prop("checked", true);
          this.setState({
            ...this.state,
            generalInformation: {...oldInfor},
            
          });
        }
      }
      else{
        if (CUSTODYCD == ""){
            
            
            this.setState({
              CUSTODYCD: "",
              
            });
        }
        
      }
    }
    // ADD QLTK
    else{
      console.log('this.props.CUSTTYPE:::', this.props.CUSTTYPE)
      let language = '';
    if (window.location.pathname && window.location.pathname == '/createaccount' && window.location.search){
      language = window.location.search.substring(10)
    }
    else {
      language = this.props.language
    }
      if (LANGUAGE!= this.state.LANGUAGE) {
        this.setState({LANGUAGE: LANGUAGE })
        await RestfulUtils.post("/account/getidtype", {
          action: this.props.access,
          custtype: this.props.CUSTTYPE?this.props.CUSTTYPE : this.state.generalInformation.CUSTTYPE,
          grinvestor: this.state.generalInformation.GRINVESTOR,
          country : this.state.generalInformation.COUNTRY,
          language: language
        }).then(res => {
          if (res) {
            self.setState({
              ...self.state,
              optionsIdType: res.result,            
            });
          }
        });  
        //load lai chi nhanh
        if (this.props.isLoadChiNhanh) {
          await RestfulUtils.post("/account/getbankbranch", {
            mbid: this.state.generalInformation.BANKCODE,
            language: language
          }).then(res => {
            self.setState({
              ...self.state,
              optionsDataCN: res.result
            });
          });
        }
        //lay ds saleid
        RestfulUtils.post('/user/getListSaleidByTLID', { language: language })
        .then((res) => {
            self.setState({
                ...self.state,  optionsDataMG: res.result
            })

        })
      }
    }
  }
  async componentWillMount() {
    console.log('componentWillMount.:===========Haki===============', this.props.language)
    let self = this
    //gan lai thong tin cu 
    let oldInfor = this.props.GeneralInfoMain ? this.props.GeneralInfoMain : this.props.CfmastInfo ? this.props.CfmastInfo.DT.dataMain : null; 
    // oldInfor.BANKCODE = this.props.BANKCODE;
    // oldInfor.ISAGREESHARE = this.props.ISAGREESHARE;
    let CUSTODYCD = oldInfor?oldInfor.CUSTODYCD?oldInfor.CUSTODYCD:"":""
    // console.log('componentWillMount.:Begin=oldInfor.ISONLINE.:', oldInfor,this.state.CUSTODYCD, CUSTODYCD )
      if (oldInfor) {
      //console.log('old infor will mount:',oldInfor)
      if (oldInfor.ISAGREE !== 'Y') oldInfor.ISAGREE = 'N';
      // console.log('componentWillMount.:oldInfor.ISONLINE1.:', oldInfor.ISONLINE, oldInfor.ISONLINE !== 'Y' || oldInfor.ISONLINE !== true)
      if (oldInfor.ISONLINE !== 'Y') oldInfor.ISONLINE = 'N';
      if (oldInfor.ISAUTH !== 'Y' ) oldInfor.ISAUTH = 'N';
      if (oldInfor.ISFATCA !== 'Y' ) oldInfor.ISFATCA = 'N';
      if (oldInfor.ISAGREESHARE !== 'Y' ) oldInfor.ISAGREESHARE = false;
      oldInfor.BANKCODE = this.props.BANKCODE;
      oldInfor.CUSTTYPE = this.props.CUSTTYPE;
      oldInfor.ISAGREESHARE = this.props.ISAGREESHARE;
      await RestfulUtils.post("/account/getidtype", {
        action: this.props.access,
        custtype: oldInfor.CUSTTYPE,
        grinvestor: this.state.generalInformation.GRINVESTOR,
        country : oldInfor.COUNTRY,
        language: this.props.language
      }).then(res => {
        if (res) {
          self.setState({
            ...self.state,
            optionsIdType: res.result,            
          });
        }
      });  
      //load lai chi nhanh
      if (this.props.isLoadChiNhanh) {
        await RestfulUtils.post("/account/getbankbranch", {
          mbid: oldInfor.BANKCODE,
          language: this.props.language
        }).then(res => {
          self.setState({
            ...self.state,
            optionsDataCN: res.result
          });
        });
      }
      //lay ds idtype
          
      this.setState({ ...this.state, generalInformation: oldInfor });
    }
    
  }
  componentDidMount() {
    console.log('didmount')
    const { user } = this.props.auth;
    let {generalInformation} = this.state
    let self = this
    self.getOptionsJOB();
    self.getOptionsRUIRO();
    self.getOptionsEXPERIENCE();
    self.getOptionsINVESTTIME();
    //console.log('listdrop :', listDrop)
    if (this.props.access == "add"){
    let  ISCUSTOMER= user?user.ISCUSTOMER ? user.ISCUSTOMER == "Y"? true: false:false:false;
    // set mac dinh neu la cus thi mac dinh ISONL chon true
      window.$("#cbISONL").prop("checked", ISCUSTOMER ? true : false);
      if(ISCUSTOMER) {
        this.state.generalInformation.ISONLINE = 'Y'
        this.setState({generalInformation: this.state.generalInformation})
      } else {
        this.state.generalInformation.ISONLINE = 'N'
        this.setState({generalInformation: this.state.generalInformation})
      }
    }
    else{
    }
    let language = '';
    if (window.location.pathname && window.location.pathname == '/createaccount' && window.location.search){
      language = window.location.search.substring(10)
    }
    else {
      language = this.props.language
    }
    RestfulUtils.post("/account/getidtype", {
      action: this.props.access,
      custtype: this.props.CUSTTYPE?this.props.CUSTTYPE : this.state.generalInformation.CUSTTYPE,
      grinvestor: this.state.generalInformation.GRINVESTOR,
      country : this.state.generalInformation.COUNTRY,
      language: language
    }).then(res => {
      if (res) {
        self.setState({
          ...self.state,
          optionsIdType: res.result,            
        });
      }
    });  
    //lay ds saleid
    RestfulUtils.post('/user/getListSaleidByTLID', { language: this.props.language })
        .then((res) => {
            self.setState({
                ...self.state,  optionsDataMG: res.result
            })

        })
    if(this.props.OBJNAME !== "CREATEACCOUNT") { // tranh loi khi goi o create acc
      RestfulUtils.post("/account/getctv", {
        action: this.props.access,
        language: this.props.language,
        OBJNAME: this.props.OBJNAME
      }).then(res => {
        if (res) {
          if(res.result){
            if(res.result.length > 0) {
              self.setState({
                ...self.state,
                optionsSaleid: res.result,
                generalInformation: {
                  ...self.state.generalInformation,
                  //SALEID: res.result[0]
                }
              });
            }
          }
        }
      });
    }
    
    
    //them popover cho 1 so input
    window.$(function() {
      var options = { trigger: "hover focus" };
      $('[data-toggle="popover"]').popover(options);
    });
    window.$("#txtFullname").focus();
    let oldInfor = this.props.GeneralInfoMain ? this.props.GeneralInfoMain : this.props.CfmastInfo ? this.props.CfmastInfo.DT.dataMain : null;
    if (oldInfor) {
      if (oldInfor.ISAGREE == 'Y') window.$("#cbIsagree").prop("checked", true);
      if (oldInfor.ISCONTACT =='Y')
        window.$("#cbIsHaveInfoContact").prop("checked", true);
      if (oldInfor.ISAUTH == 'Y' || oldInfor.ISAUTH == true) window.$("#cbIsauth").prop("checked", true);
      if (oldInfor.ISONLINE == 'Y' || oldInfor.ISONLINE == true) window.$("#cbISONL").prop("checked", true);
      if (oldInfor.ISAGREESHARE == 'Y' || oldInfor.ISAGREESHARE == true) window.$("#cbISAGREESHARE").prop("checked", true);
      if (oldInfor.ISFATCA == 'Y' || oldInfor.ISFATCA == true) window.$("#cbISFATCA").prop("checked", true);
      oldInfor.BANKCODE = this.props.BANKCODE;
      oldInfor.CUSTTYPE = this.props.CUSTTYPE;
      // if (oldInfor.RCV_EMAIL) window.$("#cbIsemail").prop("checked", true);
      // if (oldInfor.RCV_SMS) window.$("#cbIssms").prop("checked", true);
      // if (oldInfor.RCV_MAIL) window.$("#cbIsmanual").prop("checked", true);
    }

    let  isCustom= user?user.ISCUSTOMER ? user.ISCUSTOMER == "Y"? true: false:false:false;
    if (isCustom) {
      this.state.generalInformation["ACCTYPE"] = ACTYPE_TT;
      $("#drdAcctype").prop("disabled", true);
    } else $("#drdAcctype").prop("disabled", false);
    generalInformation.BANKCODE = this.props.BANKCODE;
    self.setState({ generalInformation: generalInformation})

  }
  validBirthdate(current) {
    const currentDate = moment().subtract(1, "day");
    return current < currentDate;
  }
 
  getOptionsCareby(input) {
    //lay ds careby
    return RestfulUtils.post("/account/getcareby4tlid", {
      language: this.props.language
    }).then(res => {
      return { options: res };
    });
  }
  getOptionsRUIRO() {
    let language = '';
    if (window.location.pathname && window.location.pathname == '/createaccount' && window.location.search){
      language = window.location.search.substring(10)
    }
    else {
      language = this.props.language
    }
    //lay ds careby
    let self = this;
    RestfulUtils.post("/account/getruiro", {
      language: language
    }).then((res) => {
      self.state.listDrop.RUIRO = res
      self.setState({
          listDrop : self.state.listDrop
      })

  })
}
getOptionsJOB() {
  let language = '';
  if (window.location.pathname && window.location.pathname == '/createaccount' && window.location.search){
    language = window.location.search.substring(10)
  }
  else {
    language = this.props.language
  }
  //lay ds careby
  let self = this;
  RestfulUtils.post("/account/getjob", {
    language: language
  }).then((res) => {
    self.state.listDrop.JOB = res
    self.setState({
        listDrop : self.state.listDrop
    })

})
}
  getOptionsINVESTTIME() {
    let language = '';
    if (window.location.pathname && window.location.pathname == '/createaccount' && window.location.search){
      language = window.location.search.substring(10)
    }
    else {
      language = this.props.language
    }
    //lay ds careby
    let self = this;
    RestfulUtils.post("/account/getinvesttime", {
      language: language
    }).then((res) => {
      self.state.listDrop.INVESTTIME = res
      self.setState({
          listDrop : self.state.listDrop
      })

  })
}
  getOptionsEXPERIENCE() {
    let language = '';
    if (window.location.pathname && window.location.pathname == '/createaccount' && window.location.search){
      language = window.location.search.substring(10)
    }
    else {
      language = this.props.language
    }
    //lay ds careby
    let self = this;
    RestfulUtils.post("/account/getexperience", {
      language: language
    }).then((res) => {
      self.state.listDrop.EXPERIENCE = res
      self.setState({
          listDrop : self.state.listDrop
      })

  })
}

  onChangeIdType(e) {
    if (e && e.value) {
      this.checkOldAcc(e.value, this.state.generalInformation.IDCODE);
      this.state.generalInformation["IDTYPE"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["IDTYPE"] = "";
      this.setState(this.state);
    }
  }
  onChangeCareby(e) {
    if (e && e.value) {
      this.state.generalInformation["CAREBY"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["CAREBY"] = "";
      this.setState(this.state);
    }
  }
  onChangeJOB(e) {
    if (e && e.value) {
      this.state.generalInformation["JOB"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["JOB"] = "";
      this.setState(this.state);
    }
  }
  onChangeRUIRO(e) {
    if (e && e.value) {
      this.state.generalInformation["RUIRO"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["RUIRO"] = "";
      this.setState(this.state);
    }
  }
  onChangeEXPERIENCE(e) {
    if (e && e.value) {
      this.state.generalInformation["EXPERIENCE"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["EXPERIENCE"] = "";
      this.setState(this.state);
    }
  }
  onChangeINVESTTIME(e) {
    if (e && e.value) {
      this.state.generalInformation["INVESTTIME"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["INVESTTIME"] = "";
      this.setState(this.state);
    }
  }
  onChangeMaMoGioi(e) {
    if (e && e.value) {
      this.state.generalInformation["SALEID"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["SALEID"] = "";
      this.setState(this.state);
    }
  }
  onChangeSaleid(e) {
    if (e && e.value) {
      this.state.generalInformation["SALEID"] = e.value;
      this.setState(this.state);
    } else {
      this.state.generalInformation["SALEID"] = "";
      this.setState(this.state);
    }
  }
  checkOldAcc = (idtype, idcode) => {
    let that = this;
    RestfulUtils.post("/account/checkoldaccount", {
      idtype: idtype,
      idcode: idcode
    }).then(res => {
      if (res.DT.fn_check_oldaccount == 1) {
        that.setState({
          isExistAcc: true
        });
      } else {
        that.setState({
          isExistAcc: false
        });
      }
    });
  };
  export(action) {
    let that = this;
    var body = {};
    var param = "";
    let obj = {};
    let rptid = "RP0015";
    if (action == "openExport") {
      obj.custodycd = this.state.generalInformation["CUSTODYCD"];
    } else if (action == "editExport") {
      rptid = "RP0016";
      //obj.frdate=moment(this.props.tradingdate).subtract(30,'d').format('DD/MM/YYYY')
      obj.frdate = moment(this.props.tradingdate, "DD/MM/YYYY")
        .subtract(30, "days")
        .format("DD/MM/YYYY");
      obj.todate = this.props.tradingdate;
      obj.custodycd = this.state.generalInformation["CUSTODYCD"];
      if (this.props.ACCTGRP == "N") {
        rptid = "RP0017";
        obj.owner = "owner";
      }
    } else {
      rptid = "RP0025";
      obj.custodycd = this.state.generalInformation["CUSTODYCD"];
    }
    for (var key in obj) {
      param += "'" + obj[key] + "',";
    }
    if (param.length > 0) {
      param = param.substring(0, param.length - 1);
    }
    var win = window.open("", "printwindow");
    win.document.write(
      '<html><head><title>Loading</title><link rel="stylesheet" type="text/css" href="/styles/demo.css"></head><body>'
    );
    win.document.write("<div >" + this.props.strings.loading + "</div>");
    win.document.write("</body></html>");
    //  body.p_rptparam ='('+ this.genRPTPARAM(outParams)+')';
    body.p_rptparam = param;
    body.p_rptid = rptid;
    body.p_exptype = "PDF";
    body.p_reflogid = obj.custodycd;
    this.state["titlebutton" + action] = that.props.strings.waitexport;
    this.state["disablebutton" + action] = true;
    this.setState(that.state);
    RestfulUtils.post("/report/createReportRequest_manageracct", body).then(
      res => {
        if (res.EC == 0) {
          let data = {
            p_brid: "ALL",
            p_language: this.props.lang,
            p_autoid: res.DT.p_refrptlogs,
            p_custodycd: obj.custodycd,
            p_rptid: rptid
          };
          var time = 0;
          var handle = setInterval(function() {
            RestfulUtils.post("/fund/get_rptfile_bycustodycd", data).then(
              resData => {
                time += 5000;
                if (resData.DT.data.length > 0) {
                  that.state["titlebutton" + action] =
                    that.props.strings["createxport" + action];
                  that.state["disablebutton" + action] = false;
                  that.setState(that.state);
                  clearInterval(handle);
                  let autoid = res.DT.p_refrptlogs;
                  let link = resData.DT.data[0].REFRPTFILE;
                  let linkdown =
                    "/report/downloadReport?AUTOID=" +
                    autoid +
                    "&extension=.PDF&TYPE=M" +
                    "&RPTID=" +
                    rptid +
                    "&REFRPTFILE=" +
                    link;
                  win.location.href = linkdown;
                  var handle1 = setInterval(function() {
                    win.close();
                    clearInterval(handle1);
                  }, 1000);
                }
                if (time == 60000) {
                  clearInterval(handle);
                  win.close();
                  toast.error(that.props.strings.failexport, {
                    position: toast.POSITION.BOTTOM_RIGHT
                  });
                  that.state["titlebutton" + action] =
                    that.props.strings["createxport" + action];
                  that.state["disablebutton" + action] = false;
                  that.setState(that.state);
                }
              }
            );
          }, 5000);
        } else {
          toast.error(res.EM, { position: toast.POSITION.BOTTOM_RIGHT });
          this.state["titlebutton" + action] =
            that.props.strings["createxport" + action];
          this.state["disablebutton" + action] = false;
          this.setState(that.state);
        }
      }
    );
  }
  handleMouseIn1() {
    this.setState({ hover1: true })
  }
  
  handleMouseOut1() {
    this.setState({ hover1: false })
  }
  handleMouseIn2() {
    this.setState({ hover2: true })
  }
  
  handleMouseOut2() {
    this.setState({ hover2: false })
  }
  handleMouseIn3() {
    this.setState({ hover3: true })
  }
  
  handleMouseOut3() {
    this.setState({ hover3: false })
  }
  render() {
    let self = this;
    let isRenderUyQuyen  = true;
    let isRenderCareby  = true
    const { user } = this.props.auth;
    
    let ISCUSTOMER = user;
    let ISLOGIN = ISCUSTOMER != '' && ISCUSTOMER != undefined;
    let ISCN = this.state.generalInformation.CUSTTYPE == "CN";
    ISCUSTOMER= user ? user.ISCUSTOMER ? user.ISCUSTOMER == "Y"? true: false:false:false;
    let isUPDATE = this.props.access == "update";
    let isVIEW = this.props.access == "view";
    ISCUSTOMER= user ? user.ISCUSTOMER ? user.ISCUSTOMER == "Y"? true: false:false:false;
    const { selectedOption } = this.state;
    const value = selectedOption && selectedOption.value;
    let {ISONLINE}= this.state.generalInformation;
    let ISVIE = this.props.language == 'vie' ? true : false
        const tooltipStyle1 = {
            display: this.state.hover1 ? 'block' : 'none',
            color : 'red'
          }
        const tooltipStyle2 = {
            display: this.state.hover2 ? 'block' : 'none',
            color : 'red'
          }
          const tooltipStyle3 = {
            display: this.state.hover3 ? 'block' : 'none',
            color : 'red'
          }
    // let {
    //   SIGN_IMG,
    //   OWNLICENSE_IMG,
    //   OWNLICENSE2_IMG,
    //   OWNLICENSE3_IMG,
    //   OWNLICENSE4_IMG,
    // } = this.state.generalInformation;
    // let $SIGNIMGPreview = null;
    // if (SIGN_IMG) {
    //   $SIGNIMGPreview = (
    //     <img
    //       style={{
    //         width: " 250px",
    //         height: "200px",
    //         padding: " 10px"
    //       }}
    //       src={SIGN_IMG}
    //     />
    //   );
    // } else {
    //   $SIGNIMGPreview = <div className="previewText" />;
    // }
    // let $OWNLICENSEIMGPreview = null;
    // if (OWNLICENSE_IMG) {
    //   $OWNLICENSEIMGPreview = (
    //     <img
    //       style={{
    //         width: " 250px",
    //         height: "200px",
    //         padding: " 10px"
    //       }}
    //       src={OWNLICENSE_IMG}
    //     />
    //   );
    // } else {
    //   $OWNLICENSEIMGPreview = <div className="previewText" />;
    // }
    // let $OWNLICENSE2IMGPreview = null;
    // if (OWNLICENSE2_IMG) {
    //   $OWNLICENSE2IMGPreview = (
    //     <img
    //       style={{
    //         width: " 250px",
    //         height: "200px",
    //         padding: " 10px"
    //       }}
    //       src={OWNLICENSE2_IMG}
    //     />
    //   );
    // } else {
    //   $OWNLICENSE2IMGPreview = <div className="previewText" />;
    // }
    // let $OWNLICENSE3IMGPreview = null;
    // if (OWNLICENSE3_IMG) {
    //   $OWNLICENSE3IMGPreview = (
    //     <img
    //       style={{
    //         width: " 250px",
    //         height: "200px",
    //         padding: " 10px"
    //       }}
    //       src={OWNLICENSE3_IMG}
    //     />
    //   );
    // } else {
    //   $OWNLICENSE3IMGPreview = <div className="previewText" />;
    // }
    // let $OWNLICENSE4IMGPreview = null;
    // if (OWNLICENSE4_IMG) {
    //   $OWNLICENSE4IMGPreview = (
    //     <img
    //       style={{
    //         width: " 250px",
    //         height: "200px",
    //         padding: " 10px"
    //       }}
    //       src={OWNLICENSE4_IMG}
    //     />
    //   );
    // } else {
    //   $OWNLICENSE4IMGPreview = <div className="previewText" />;
    // }
    let isDisableWhenView = this.props.access == "view";
    let isDisableWhenUpdate = this.props.access == "update";
    let displayExport = this.props.access == "add" ? "none" : "block";
    var renderTooltip = null;
    if (this.props.language == 'vie') {
      renderTooltip = <ul style={{paddingLeft: "0px" }}>Nh√† ƒë·∫ßu t∆∞ c√≥ d·∫•u hi·ªáu M·ªπ l√† Nh√† ƒë·∫ßu t∆∞ c√≥ m·ªôt trong c√°c d·∫•u hi·ªáu sau:
<li>C√¥ng d√¢n M·ªπ, ng∆∞·ªùi c√≥ th·∫ª xanh c·ªßa M·ªπ, ho·∫∑c Ng∆∞·ªùi ƒë√≥ng thu·∫ø M·ªπ</li>
<li>N∆°i sinh t·∫°i M·ªπ</li>
<li>ƒê·ªãa ch·ªâ c∆∞ tr√∫ ·ªü M·ªπ ho·∫∑c ƒë·ªãa ch·ªâ h√≤m th∆∞ t·∫°i M·ªπ</li>
<li>S·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i ·ªü M·ªπ</li>
<li>L·ªánh thanh to√°n th∆∞·ªùng tr·ª±c t·ª´ m·ªôt t√†i kho·∫£n n∆∞·ªõc ngo√†i ƒë·∫øn m·ªôt t√†i kho·∫£n ƒë∆∞·ª£c duy tr√¨ ·ªü M·ªπ</li>
<li>Gi·∫•y ·ªßy quy·ªÅn hay th·∫©m quy·ªÅn k√Ω ƒë∆∞·ª£c c·∫•p cho ng∆∞·ªùi c√≥ ƒë·ªãa ch·ªâ ·ªü M·ªπ</li>
<li>ƒê·ªãa ch·ªâ ‚Äú g·ª≠i nh·ªù‚Äù ho·∫∑c ‚Äúgi·ªØ th∆∞‚Äù l√† ƒë·ªãa ch·ªâ duy nh·∫•t c·ªßa ch·ªß t√†i kho·∫£n ·ªü M·ªπ</li>
</ul>
}else if (this.props.language == 'en') {
  renderTooltip = <ul style={{paddingLeft: "0px" }}>Investors with US Signs are investors who have one of the following signs:
<li>Investors are US citizen or resident</li>
<li>Investors are born in the US</li>
<li>Investors have a current US mailing or residence address</li>
<li>Investors have a current US phone number</li>
<li>Investors have standing instructions to transfer funds to an account maintained in the US or directions regularly received from a US address</li>
<li>Investors have an effective power of attorney or signatory authority granted over your account to a person with a US address</li>
<li>Investor have any address on file which is ‚Äúin care of‚Äù or ‚Äúhold mail‚Äù in the US</li>
</ul>
}
var renderTooltip2 = null;
    if (this.props.language == 'vie') {
      renderTooltip2 = <div  style={tooltipStyle2}>
      Vui l√≤ng ch·ªçn ‚ÄúC√≥‚Äù trong c√°c tr∆∞·ªùng h·ª£p sau ƒë√¢y: <br />
      a. Qu√Ω kh√°ch l√† ng∆∞·ªùi gi·ªØ ch·ª©c v·ª• c·∫•p cao trong c√°c c∆° quan, t·ªï ch·ª©c h·ªØu quan c·ªßa n∆∞·ªõc ngo√†i; ho·∫∑c <br />
      b. Qu√Ω kh√°ch l√† cha, m·∫π, v·ª£, ch·ªìng, con, anh ru·ªôt, ch·ªã ru·ªôt, em ru·ªôt c·ªßa ng∆∞·ªùi quy ƒë·ªãnh t·∫°i ƒëi·ªÉm a n√™u tr√™n.<br />
      </div>
}else if (this.props.language == 'en') {
  renderTooltip2 = <div  style={tooltipStyle2}>
  Please choose "Yes" in the folowing cases <br />
  a. You are a high officer from the local government or from other related foreign organizations. <br />
  b. You are connected by blood, marriage to the person described in section a.<br />
  </div>
}
    return (
      <div disabled = {ISCUSTOMER ? true : false}>
        <div
          className={
            this.props.access !== "view" ? "col-md-12" : "col-md-12 disable"
          }
          style={{ paddingTop: "11px" }}
        >
        <div className="col-md-12 row module">
        <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.custtype}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <DropdownFactory
                disabled={isDisableWhenView || isDisableWhenUpdate}
                onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdCusttype"
                value="CUSTTYPE"
                CDTYPE="CF"
                CDNAME="CUSTTYPE"
                CDVAL={this.state.generalInformation.CUSTTYPE}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.fullname}</b>
              </h5>
            </div>
            <div className="col-md-9">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.FULLNAME}
                onChange={this.onChange.bind(this, "FULLNAME")}
                id="txtFullname"
                className="form-control"
                type="text"
                placeholder={this.props.strings.fullname}
                data-toggle="popover" 
                data-trigger="hover"
                data-placement="top"
                data-content={this.props.strings.namePopover}
                data-original-title={this.props.strings.popoverTitle}

              />
            </div>
          </div>
          {ISCN && <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.sex}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <DropdownFactory
                disabled={isDisableWhenView}
                onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdSex"
                value="SEX"
                CDTYPE="CF"
                CDNAME="SEX"
                CDVAL={this.state.generalInformation.SEX}
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.birthdate}</b>
              </h5>
            </div>
            <div className="col-md-3 fixWidthDatePickerForOthers">
              <DateInput
                disabled={isDisableWhenView}
                valid={this.validBirthdate}
                id="txtBirthdate"
                onChange={this.onChange.bind(this)}
                value={this.state.generalInformation.BIRTHDATE}
                type="BIRTHDATE"
              />
            </div>
            </div>}

          {/* <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.custclass}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <DropdownFactory
                disabled={true}
                onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdGrinvestor"
                value="GRINVESTOR"
                CDTYPE="CF"
                CDNAME="GRINVESTOR"
                CDVAL={this.state.generalInformation.GRINVESTOR}
              />
            </div>
            
          </div> */}
          <div className="col-md-12 row">
          <div className="col-md-3" onMouseOver={this.handleMouseIn1.bind(this)} onMouseOut={this.handleMouseOut1.bind(this)}>
              <h5 className="highlight">
                <b>{this.props.strings.country}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <DropdownFactory
                disabled={isUPDATE || isDisableWhenView}
                //onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdCountry"
                value="COUNTRY"
                CDTYPE="CF"
                CDNAME="COUNTRY"
                CDVAL={this.state.generalInformation.COUNTRY}
              />
            </div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.othercountry}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.OTHERCOUNTRY}
                onChange={this.onChange.bind(this, "OTHERCOUNTRY")}
                id="txtOthercountry"
                className="form-control"
                type="text"
                placeholder={this.props.strings.othercountry}
              />
              
            </div>
            </div>
            {ISVIE ? <div className="col-md-12" style={tooltipStyle1}>
            <div  style={tooltipStyle1}>N·∫øu KH c√≥ d·∫•u hi·ªáu M·ªπ, vui l√≤ng li√™n h·ªá MB Capital ho·∫∑c ƒê·∫°i l√Ω ph√¢n ph·ªëi g·∫ßn nh·∫•t c·ªßa MB Capital ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ b·ªï sung th√¥ng tin ƒê·∫°o lu·∫≠t tu√¢n th·ªß FATCA
            </div>
            </div> :
            <div className="col-md-12" style={tooltipStyle1}>
            <div   style={tooltipStyle1}>If you are US.Person, please contact MB Capital or Distributors of MB Capital for assistance regarding FATCA</div>
            </div>}
{/* ------------------------------Th√¥ng tin ngh·ªÅ nghi·ªáp - visa---------------------------- */}
            {ISCN && this.state.generalInformation.COUNTRY === COUNTRY_234 &&
            <div>
            <div className="col-md-12 row">
              <div className="col-md-3">
                <h5 className="highlight">
                  <b>{this.props.strings.JOB}</b>
                </h5>
              </div>
              <div className="col-md-3">
                {/* <input
                  maxLength="500"
                  disabled={isDisableWhenView}
                  value={this.state.generalInformation.JOB}
                  onChange={this.onChange.bind(this, "JOB")}
                  id="txtJOB"
                  className="form-control"
                  type="text"
                  placeholder={this.props.strings.JOB}
                /> */}

                <Select.Async
                    name="form-field-name"
                    //disabled={isDisableWhenView || isUPDATE}
                    placeholder={this.props.strings.JOB}
                    loadOptions={this.getOptionsAsync.bind(this,'JOB')}
                    options={this.state.listDrop.JOB}
                    value={this.state.generalInformation.JOB}
                    onChange={this.onChangeJOB.bind(this)}
                    id="drdJOB"
                    cache={false}
                  />
                
              </div> 
              <div className="col-md-3">
                <h5 className="">
                  <b>{this.props.strings.POSITIONCN}</b>
                </h5>
              </div>
              <div className="col-md-3">
                <input
                  disabled={isDisableWhenView}
                  value={this.state.generalInformation.POSITIONCN}
                  onChange={this.onChange.bind(this, "POSITIONCN")}
                  id="txtPOSITIONCN"
                  className="form-control"
                  type="text"
                  placeholder={this.props.strings.POSITIONCN}
                />
              </div>   
            </div>
            <div className="col-md-12 row">
              <div className="col-md-3">
                <h5 className={this.state.generalInformation["CUSTTYPE"] == 'CN' && this.state.generalInformation["COUNTRY"] == '234' ? "highlight": "" }>
                  <b>{this.props.strings.WORKADDRESS}</b>
                </h5>
              </div>
              <div className="col-md-9">
                <input
                  maxLength="500"
                  disabled={isDisableWhenView}
                  value={this.state.generalInformation.WORKADDRESS}
                  onChange={this.onChange.bind(this, "WORKADDRESS")}
                  id="txtWORKADDRESS"
                  className="form-control"
                  type="text"
                  placeholder={this.props.strings.WORKADDRESS}
                />
              </div> 
              
            </div>
            </div>}
            
           
{/* ---------------------------------Ho chieu----------------------------------- */}

      <div className="col-md-12 row">
      <div className="col-md-3">
              <h5 className={this.state.generalInformation.CUSTTYPE == "CN" ? "":"highlight"}>
                <b>{this.props.strings.TAXNUMBER}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="50"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.TAXNUMBER}
                onChange={this.onChange.bind(this, "TAXNUMBER")}
                id="txtTAXNUMBER"
                className="form-control"
                type="text"
                placeholder={this.props.strings.TAXNUMBER}
              />
            </div> 
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.TAXPLACE}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                disabled={isDisableWhenView}
                value={this.state.generalInformation.TAXPLACE}
                onChange={this.onChange.bind(this, "TAXPLACE")}
                id="txtTAXPLACE"
                className="form-control"
                type="text"
                placeholder={this.props.strings.TAXPLACE}
              />
            </div>
            
            
            </div>
            {this.state.generalInformation.COUNTRY !== COUNTRY_234 &&(<div>
          <div className="col-md-12 row">
          <div className="col-md-3">
              <h5 className="highlight">
                <b>{ISCN && this.state.generalInformation.COUNTRY !== COUNTRY_234 ? this.props.strings.PASSPORT :this.props.strings.PASSPORT1}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                disabled={isDisableWhenView}
                value={this.state.generalInformation.PASSPORT}
                onChange={this.onChange.bind(this, "PASSPORT")}
                id="txtPASSPORT"
                className="form-control"
                type="text"
                placeholder={ISCN && this.state.generalInformation.COUNTRY !== COUNTRY_234 ? this.props.strings.PASSPORT :this.props.strings.PASSPORT1}
              />
            </div>
            <div className="col-md-3">
            <h5 className="highlight">
                <b>{ISCN && this.state.generalInformation.COUNTRY !== COUNTRY_234 ? this.props.strings.PASSPORTDATE :this.props.strings.PASSPORTDATE1}</b>
              </h5>
              {/* <h5 className="">
                <b>{this.props.strings.PASSPORTDATE}</b>
              </h5> */}
            </div>
            <div className="col-md-3 fixWidthDatePickerForOthers">
              <DateInput
                disabled={isDisableWhenView}
                valid={this.validBirthdate}
                id="txtPASSPORTDATE"
                onChange={this.onChange.bind(this)}
                value={this.state.generalInformation.PASSPORTDATE}
                type="PASSPORTDATE"
              />
            </div>
          
            
            </div>
    </div>)}
    {this.state.generalInformation.COUNTRY !== COUNTRY_234 &&(
            <div className="col-md-12 row">
              <div className="col-md-3">
              <h5 className="highlight">
                <b>{ISCN && this.state.generalInformation.COUNTRY !== COUNTRY_234 ? this.props.strings.PASSPORTPLACE :this.props.strings.PASSPORTPLACE1}</b>
              </h5>
              {/* <h5 className="">
                <b>{this.props.strings.PASSPORTPLACE}</b>
              </h5> */}
            </div>
            <div className="col-md-3">
            <input
                disabled={isDisableWhenView}
                value={this.state.generalInformation.PASSPORTPLACE}
                onChange={this.onChange.bind(this, "PASSPORTPLACE")}
                id="txtPASSPORTPLACE"
                className="form-control"
                type="text"
                placeholder={ISCN && this.state.generalInformation.COUNTRY !== COUNTRY_234 ? this.props.strings.PASSPORTPLACE :this.props.strings.PASSPORTPLACE1}
              />
            </div>
          
            </div>)}
{/* --------------------------------------------------------------------------------------------------- */}

            <div className="col-md-12 row">  
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.idtype}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <Select.Async
                name="form-field-name"
                disabled={isDisableWhenView || isUPDATE}
                placeholder={this.props.strings.idtype}
                options={this.state.optionsIdType}
                loadOptions={this.getOptionsIdType.bind(this)}
                value={this.state.generalInformation.IDTYPE}
                onChange={this.onChangeIdType.bind(this)}
                id="drdIdtype"
                cache={false}
              />
              {/* <DropdownFactory disabled={isDisableWhenView} onSetDefaultValue={this.onSetDefaultValue.bind(this)} onChange={this.onChange.bind(this)} ID="drdIdtype" value="IDTYPE" CDTYPE="CF" CDNAME="IDTYPE" CDVAL={this.state.generalInformation.IDTYPE} /> */}
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.idcode}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="50"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.IDCODE}
                id="txtIdcode"
                className="form-control"
                type="text"
                placeholder={this.props.strings.idcode}
                onChange={this.onChange.bind(this, "IDCODE")}
                prefix={""}
                // data-toggle="popover"
                // data-trigger="hover"
                // data-placement="top"
                // data-content={this.props.strings.idcodePopover}
                // data-original-title={this.props.strings.popoverTitle}
              />
            </div>
          </div>

          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.iddate}</b>
              </h5>
            </div>
            <div className="col-md-3 fixWidthDatePickerForOthers">
              <DateInput
                disabled={isDisableWhenView}
                id="txtIddate"
                onChange={this.onChange.bind(this)}
                value={this.state.generalInformation.IDDATE}
                type="IDDATE"
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.idplace}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                disabled={isDisableWhenView}
                value={this.state.generalInformation.IDPLACE}
                onChange={this.onChange.bind(this, "IDPLACE")}
                id="txtIdplace"
                className="form-control"
                type="text"
                placeholder={this.props.strings.idplace}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3" />
            <div className="col-md-3">
              {this.state.isExistAcc && (
                <div id="WarningExistAcc">
                  <h5 className="highlight">
                    <span className="glyphicon glyphicon-warning-sign"> </span>{" "}
                    {this.props.strings.WarningExistAcc}
                  </h5>
                </div>
              )}
            </div>
            {isVIEW && (
              <div>
                <div className="col-md-3">
                  <h5 className="highlight">
                    <b>{this.props.strings.expiredate}</b>
                  </h5>
                </div>
                <div className="col-md-3 fixWidthDatePickerForOthers">
                  <DateInput
                    disabled={isDisableWhenView}
                    id="txtExpiredate"
                    onChange={this.onChange.bind(this)}
                    value={this.state.generalInformation.IDEXPDATED}
                    type="IDEXPDATED"
                  />
                </div>{" "}
              </div>
            )}
          </div>
         
          {/* {this.state.generalInformation["COUNTRY"] !== COUNTRY_234 && (
            <div className="col-md-12 row">
              <div className="col-md-3" />
              <div className="col-md-3">
                <h5 className="highlight">
                  <i>
                    <i className="fas fa-exclamation-circle" />{" "}
                    {this.props.strings.noteTradingcode}
                  </i>{" "}
                </h5>
              </div>
              <div className="col-md-3">
                <h5 className="highlight">
                  <b>{this.props.strings.tradingcode}</b>
                </h5>
              </div>
              <div className="col-md-3">
                <input
                  maxLength="50"
                  disabled={isDisableWhenView}
                  value={this.state.generalInformation.TRADINGCODE}
                  id="txtTradingcode"
                  className="form-control"
                  type="text"
                  placeholder={this.props.strings.tradingcode}
                  onChange={this.onChange.bind(this, "TRADINGCODE")}
                />
              </div>
            </div>
          )} */}
          {ISCN && this.state.generalInformation.COUNTRY !== COUNTRY_234 &&
            <div>
            <div className="col-md-12 row">
              <div className="col-md-3">
                <h5 className="">
                  <b>{this.props.strings.VISANO}</b>
                </h5>
              </div>
              <div className="col-md-3">
                <input
                  maxLength="50"
                  disabled={isDisableWhenView}
                  value={this.state.generalInformation.VISANO}
                  onChange={this.onChange.bind(this, "VISANO")}
                  id="txtVISANO"
                  className="form-control"
                  type="text"
                  placeholder={this.props.strings.VISANO}
                />
              </div> 
              <div className="col-md-3">
                <h5 className="">
                  <b>{this.props.strings.LIDONHAPCANH}</b>
                </h5>
              </div>
              <div className="col-md-3">
                <input
                  disabled={isDisableWhenView}
                  value={this.state.generalInformation.LIDONHAPCANH}
                  onChange={this.onChange.bind(this, "LIDONHAPCANH")}
                  id="txtLIDONHAPCANH"
                  className="form-control"
                  type="text"
                  placeholder={this.props.strings.LIDONHAPCANH}
                />
              </div>   
            </div>
            
            </div>}
          
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{ISCN ? this.props.strings.contactaddress:this.props.strings.regaddress1}</b>
              </h5>
            </div>
            <div className="col-md-9">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.ADDRESS}
                onChange={this.onChange.bind(this, "ADDRESS")}
                id="txtADDRESS"
                className="form-control"
                type="text" 
                placeholder={this.props.strings.address}
              />
            </div>
            {/* <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.PHOTHONXOM}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.PHOTHONXOM}
                onChange={this.onChange.bind(this, "PHOTHONXOM")}
                id="txtPHOTHONXOM"
                className="form-control"
                type="text"
                placeholder={this.props.strings.PHOTHONXOM}
              />
            </div> */}
          </div>

          {/* <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.PHUONGXA}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.PHUONGXA}
                onChange={this.onChange.bind(this, "PHUONGXA")}
                id="txtPHUONGXA"
                className="form-control"
                type="text"
                placeholder={this.props.strings.PHUONGXA}
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.THANHPHO}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.THANHPHO}
                onChange={this.onChange.bind(this, "THANHPHO")}
                id="txtTHANHPHO"
                className="form-control"
                type="text"
                placeholder={this.props.strings.THANHPHO}
              />
            </div>
          </div> */}
          {/* {ISCN ? <div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.regaddress}</b>
              </h5>
            </div>
            </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.SONHAREG}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.SONHAREG}
                onChange={this.onChange.bind(this, "SONHAREG")}
                id="txtSONHAREG"
                className="form-control"
                type="text"
                placeholder={this.props.strings.SONHAREG}
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.PHOTHONXOMREG}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.PHOTHONXOMREG}
                onChange={this.onChange.bind(this, "PHOTHONXOMREG")}
                id="txtPHOTHONXOMREG"
                className="form-control"
                type="text"
                placeholder={this.props.strings.PHOTHONXOMREG}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.PHUONGXAREG}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.PHUONGXAREG}
                onChange={this.onChange.bind(this, "PHUONGXAREG")}
                id="txtPHUONGXAREG"
                className="form-control"
                type="text"
                placeholder={this.props.strings.PHUONGXAREG}
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.THANHPHOREG}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.THANHPHOREG}
                onChange={this.onChange.bind(this, "THANHPHOREG")}
                id="txtTHANHPHOREG"
                className="form-control"
                type="text"
                placeholder={this.props.strings.THANHPHOREG}
              />
            </div>
          </div>
          </div>:null} */}
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.regaddress}</b>
              </h5>
            </div>
            <div className="col-md-9">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.REGADDRESS}
                onChange={this.onChange.bind(this, "REGADDRESS")}
                id="txtregAddress"
                className="form-control"
                type="text"
                placeholder={this.props.strings.regaddress}
              />
            </div>
          </div> 
          <div className="col-md-12 row">
          {!ISCN ?
          <div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.fax}</b>
              </h5>
            </div>
            <div className="col-md-9">
              <input
                maxLength="50"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.FAX}
                onChange={this.onChange.bind(this, "FAX")}
                id="txtFax"
                className="form-control"
                type="text"
                placeholder={this.props.strings.fax}
              />
            </div>
            </div>:null}
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight" >
                <b>{this.props.strings.email}</b>
              </h5>
            </div>
            <div className="col-md-9">
              <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.EMAIL}
                onChange={this.onChange.bind(this, "EMAIL")}
                id="txtEmail"
                className="form-control"
                type="text"
                placeholder={this.props.strings.email}
                data-toggle="popover" 
                data-trigger="hover"
                data-placement="top"
                data-content={this.props.strings.emailPopover}
                data-original-title={this.props.strings.popoverTitle}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3">              
                <h5 className="highlight">
                  <b>{this.props.strings.mobile}</b>
                </h5>
            </div>
            <div className="col-md-3">
              {/* <NumberFormat value={this.state.generalInformation.MOBILE} id="txtMobile" className="form-control" placeholder={this.props.strings.mobile} onChange={this.onChange.bind(this, 'MOBILE')}  prefix={''} data-toggle="popover" data-trigger="hover" data-placement="top" data-content={this.props.strings.mobilePopover} data-original-title={this.props.strings.popoverTitle} /> */}
              <input
                maxLength="50"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.MOBILE}
                onChange={this.onChange.bind(this, "MOBILE")}
                id="txtMobile"
                className="form-control"
                type="text"
                placeholder={this.props.strings.mobile}
                data-toggle="popover"
                data-trigger="hover"
                data-placement="top"
                data-content={this.props.strings.mobilePopover}
                data-original-title={this.props.strings.popoverTitle}
              />
            </div>
            <div className="col-md-3">
              <h5>
                <b>{this.props.strings.phone}</b>
              </h5>
            </div>
            <div className="col-md-3">
              {/* <NumberFormat value={this.state.generalInformation.PHONE} id="txtPhone" className="form-control" placeholder={this.props.strings.phone} onValueChange={this.onChange.bind(this, 'PHONE')} prefix={''} /> */}
              <input
                maxLength="50"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.PHONE}
                onChange={this.onChange.bind(this, "PHONE")}
                id="txtPhone"
                className="form-control"
                type="text"
                placeholder={this.props.strings.phone}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.bankaccno}</b>
              </h5>
            </div>
            <div className="col-md-3">
              {/* <NumberFormat value={this.state.generalInformation.BANKACC} id="txtBankaccno" className="form-control" placeholder={this.props.strings.bankaccno} onValueChange={this.onChange.bind(this, 'BANKACC')} prefix={''} data-toggle="popover" data-trigger="hover" data-placement="top" data-content={this.props.strings.backAccountPopover} data-original-title={this.props.strings.popoverTitle} /> */}
              <input
                maxLength="20"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.BANKACC}
                onChange={this.onChange.bind(this, "BANKACC")}
                id="txtBankaccno"
                className="form-control"
                type="text"
                placeholder={this.props.strings.bankaccno}
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.bankname}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <DropdownFactory
                disabled={isDisableWhenView}
                onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdBank"
                value="BANKCODE"
                CDTYPE="GW"
                CDNAME="BANK"
                CDVAL={this.state.generalInformation.BANKCODE}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight"><b>{this.props.strings.branchname}</b></h5>
            </div>
            <div className="col-md-3">
              <input
                disabled={isDisableWhenView}
                value={this.state.generalInformation.CITYBANK}
                onChange={this.onChange.bind(this, "CITYBANK")}
                id="txtBranchname"
                className="form-control"
                type="text"
                placeholder={this.props.strings.branchname}
              />

            </div>
            {/* <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.acctype}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <DropdownFactory
                disabled={isUPDATE || isDisableWhenView}
                onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdAcctype"
                value="ACCTYPE"
                CDTYPE="CF"
                CDNAME="ACCTYPE"
                CDVAL={this.state.generalInformation.ACCTYPE}
              />
            </div> */}
              <div>
              {ISLOGIN && isRenderCareby && (<div>
                <div className="col-md-3">
                  <h5 className="highlight">
                    <b>{this.props.strings.careby}</b>
                  </h5>
                </div>
                <div className="col-md-3">
                  <Select.Async
                    name="form-field-name"
                    disabled={isDisableWhenView || isUPDATE}
                    placeholder={this.props.strings.careby}
                    loadOptions={this.getOptionsCareby.bind(this)}
                    value={this.state.generalInformation.CAREBY}
                    onChange={this.onChangeCareby.bind(this)}
                    id="drdCareby"
                    cache={false}
                  />
                </div> </div> )}
                {isRenderUyQuyen? <div>
                <div className="col-md-3">
                  <h5 className='highlight'><b>{this.props.strings.isauth}</b></h5>
                </div>
                <div className="col-md-3">
                  <DropdownFactory
                      disabled={isDisableWhenView}
                      onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                      onChange={this.onChange.bind(this)}
                      ID="drdISAUTH"
                      value="ISAUTH"
                      CDTYPE="SY"
                      CDNAME="YESNO"
                      CDVAL={this.state.generalInformation.ISAUTH}
                    />
                </div>
                </div>:<div>
                </div>}
              </div>
           
          </div>

{ISLOGIN && (<div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.MGCSTK}</b>
              </h5>
            </div>
            <div className="col-md-3">

          <Select.Async className="form-field-name"
                                            disabled={isDisableWhenView || isDisableWhenUpdate}
                                            name="form-field-name"
                                            placeholder={this.props.strings.MGCSTK}
                                            loadOptions={this.getOptionsMaMoGioi.bind(this)}
                                            options={this.state.optionsDataMG}
                                            cache={false}
                                            value={this.state.generalInformation.SALEID}
                                            onChange={this.onChangeMaMoGioi.bind(this)}
                                            id="drdsaleid"
                                        />
                                        </div>
                                        </div>)}
        </div>
        {/* ------------------------------------------------------------------------------------------- */}
        <div className="col-md-12 row module">
          <div className="col-md-12">
              <h5 className="">
                <b>{this.props.strings.NHUCAUDAUTU}</b>
              </h5>
            </div>
          
          
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.INVESTTIME}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <Select.Async
                    name="form-field-name"
                    //disabled={isDisableWhenView || isUPDATE}
                    placeholder={this.props.strings.INVESTTIME}
                    loadOptions={this.getOptionsAsync.bind(this,'INVESTTIME')}
                    options={this.state.listDrop.INVESTTIME}
                    value={this.state.generalInformation.INVESTTIME}
                    onChange={this.onChangeINVESTTIME.bind(this)}
                    id="drdINVESTTIME"
                    cache={false}
                  />
            {/* <DropdownFactory
                disabled={isDisableWhenView}
                //onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdINVESTTIME"
                value="INVESTTIME"
                CDTYPE="CF"
                CDNAME="INVESTTIME"
                CDVAL={this.state.generalInformation.INVESTTIME}
              /> */}
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.RUIRO}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <Select.Async
                    name="form-field-name"
                    //disabled={isDisableWhenView || isUPDATE}
                    placeholder={this.props.strings.RUIRO}
                    loadOptions={this.getOptionsAsync.bind(this,'RUIRO')}
                    options={this.state.listDrop.RUIRO}
                    value={this.state.generalInformation.RUIRO}
                    onChange={this.onChangeRUIRO.bind(this)}
                    id="drdRUIRO"
                    cache={false}
                  />
            </div>
          </div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.EXPERIENCE}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <Select.Async
                    name="form-field-name"
                    //disabled={isDisableWhenView || isUPDATE}
                    placeholder={this.props.strings.EXPERIENCE}
                    loadOptions={this.getOptionsAsync.bind(this,'EXPERIENCE')}
                    options={this.state.listDrop.EXPERIENCE}
                    value={this.state.generalInformation.EXPERIENCE}
                    onChange={this.onChangeEXPERIENCE.bind(this)}
                    id="drdEXPERIENCE"
                    cache={false}
                  />
            </div>
            
          </div>
          
          </div>  
                                        
          
{/* -----------------------------------------Legal Representative----------------------------- */}
          {this.state.generalInformation.CUSTTYPE == 'TC' && (
          <div className="col-md-12 row module">
          <div className="col-md-12">
              <h5 className="">
                <b>{this.props.strings.ISREPRESENTATIVE}</b>
              </h5>
            </div>
          {/* <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.ISREPRESENTATIVE}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <DropdownFactory
                      disabled={isDisableWhenView}
                      //onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                      onChange={this.onChange.bind(this)}
                      ID="drdISREPRESENTATIVE"
                      value="ISREPRESENTATIVE"
                      CDTYPE="SY"
                      CDNAME="YESNO"
                      CDVAL={this.state.generalInformation.ISREPRESENTATIVE}
                    />
            </div>
            
          </div> */}
          <div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.LRNAME}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRNAME}
                onChange={this.onChange.bind(this, "LRNAME")}
                id="txtLRNAME"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRNAME}
              />
            </div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRSEX}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <DropdownFactory
                disabled={isDisableWhenView}
                onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdLRSEX"
                value="LRSEX"
                CDTYPE="CF"
                CDNAME="SEX"
                CDVAL={this.state.generalInformation.LRSEX}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.LRDOB}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <DateInput
                disabled={isDisableWhenView}
                valid={this.validBirthdate}
                id="txtLRDOB"
                onChange={this.onChange.bind(this)}
                value={this.state.generalInformation.LRDOB}
                type="LRDOB"
              />
            </div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRCOUNTRY}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <DropdownFactory
                disabled={isDisableWhenView}
                //onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                onChange={this.onChange.bind(this)}
                ID="drdLRCOUNTRY"
                value="LRCOUNTRY"
                CDTYPE="CF"
                CDNAME="COUNTRY"
                CDVAL={this.state.generalInformation.LRCOUNTRY}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRPOSITION}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRPOSITION}
                onChange={this.onChange.bind(this, "LRPOSITION")}
                id="txtLRPOSITION"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRPOSITION}
              />
            </div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRDECISIONNO}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRDECISIONNO}
                onChange={this.onChange.bind(this, "LRDECISIONNO")}
                id="txtLRDECISIONNO"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRDECISIONNO}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.LRID}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRID}
                onChange={this.onChange.bind(this, "LRID")}
                id="txtLRID"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRID}
              />
            </div>


            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.LRIDDATE}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <DateInput
                disabled={isDisableWhenView}
                id="txtLRIDDATE"
                onChange={this.onChange.bind(this)}
                value={this.state.generalInformation.LRIDDATE}
                type="LRIDDATE"
              />
            </div>
          </div>
          <div className="col-md-12 row">
          <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.LRIDPLACE}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRIDPLACE}
                onChange={this.onChange.bind(this, "LRIDPLACE")}
                id="txtLRIDPLACE"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRIDPLACE}
              />
            
            </div>
            </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRADDRESS}</b>
              </h5>
            </div>
            <div className="col-md-9 ">
            <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRADDRESS}
                onChange={this.onChange.bind(this, "LRADDRESS")}
                id="txtLRADDRESS"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRADDRESS}
              />
            </div>
            
          </div>
          <div className="col-md-12 row">
          <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRCONTACT}</b>
              </h5>
            </div>
            <div className="col-md-9">
            <input
                maxLength="500"
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRCONTACT}
                onChange={this.onChange.bind(this, "LRCONTACT")}
                id="txtLRCONTACT"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRCONTACT}
              />
            </div>
            </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.LRPRIPHONE}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRPRIPHONE}
                onChange={this.onChange.bind(this, "LRPRIPHONE")}
                id="txtLRPRIPHONE"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRPRIPHONE}
              />
            </div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRALTPHONE}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRALTPHONE}
                onChange={this.onChange.bind(this, "LRALTPHONE")}
                id="txtLRALTPHONE"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRALTPHONE}
              />
            </div>
          </div>
          <div className="col-md-12 row">
          
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.LRFAX}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LRFAX}
                onChange={this.onChange.bind(this, "LRFAX")}
                id="txtLRFAX"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LRFAX}
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.LREMAIL}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.LREMAIL}
                onChange={this.onChange.bind(this, "LREMAIL")}
                id="txtLREMAIL"
                className="form-control"
                type="text"
                placeholder={this.props.strings.LREMAIL}
              />
            </div>
            </div>
            
          </div>
          </div>)}
          {/* ------------------------------ƒê·∫†I DI·ªÜN V·ªêN----------------------- */}
          {this.state.generalInformation.CUSTTYPE == 'TC' && (
          <div className="col-md-12 row module">
          <div className="col-md-12">
              <h5 className="">
                <b>{this.props.strings.CAPITALAGENT}</b>
              </h5>
            </div>
          
          <div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.CAPITALNAME}</b>
              </h5>
            </div>
            <div className="col-md-9 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.CAPITALNAME}
                onChange={this.onChange.bind(this, "CAPITALNAME")}
                id="txtCAPITALNAME"
                className="form-control"
                type="text"
                placeholder={this.props.strings.CAPITALNAME}
              />
            </div>
            
          </div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.CAPITALPOSITION}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.CAPITALPOSITION}
                onChange={this.onChange.bind(this, "CAPITALPOSITION")}
                id="txtCAPITALPOSITION"
                className="form-control"
                type="text"
                placeholder={this.props.strings.CAPITALPOSITION}
              />
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.CAPITALIDCODE}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.CAPITALIDCODE}
                onChange={this.onChange.bind(this, "CAPITALIDCODE")}
                id="txtCAPITALIDCODE"
                className="form-control"
                type="text"
                placeholder={this.props.strings.CAPITALIDCODE}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            
          <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.CAPITALIDDATE}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <DateInput
                disabled={isDisableWhenView}
                id="txtCAPITALIDDATE"
                onChange={this.onChange.bind(this)}
                value={this.state.generalInformation.CAPITALIDDATE}
                type="CAPITALIDDATE"
              />
            </div>


            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.CAPITALIDPLACE}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                disabled={isDisableWhenView}
                value={this.state.generalInformation.CAPITALIDPLACE}
                onChange={this.onChange.bind(this, "CAPITALIDPLACE")}
                id="txtCAPITALIDPLACE"
                className="form-control"
                type="text"
                placeholder={this.props.strings.CAPITALIDPLACE}
              />
            
            </div>
          </div>



          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.CAPITALTEL}</b>
              </h5>
            </div>
            <div className="col-md-3 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.CAPITALTEL}
                onChange={this.onChange.bind(this, "CAPITALTEL")}
                id="txtCAPITALTEL"
                className="form-control"
                type="text"
                placeholder={this.props.strings.CAPITALTEL}
              />
            </div>
            </div>



          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.CAPITALEMAIL}</b>
              </h5>
            </div>
            <div className="col-md-9 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.CAPITALEMAIL}
                onChange={this.onChange.bind(this, "CAPITALEMAIL")}
                id="txtCAPITALEMAIL"
                className="form-control"
                type="text"
                placeholder={this.props.strings.CAPITALEMAIL}
              />
            </div>


            
          </div>

          </div>
          </div>)}
          {/* ------------------------------ƒê·∫†I DI·ªÜN ONLINE----------------------- */}
          {this.state.generalInformation.CUSTTYPE == 'TC' && (
          <div className="col-md-12 row module">
          <div className="col-md-12">
              <h5 className="">
                <b>{this.props.strings.ONLINEAGENT}</b>
              </h5>
            </div>
          
          <div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.ONLINENAME}</b>
              </h5>
            </div>
            <div className="col-md-9 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.ONLINENAME}
                onChange={this.onChange.bind(this, "ONLINENAME")}
                id="txtONLINENAME"
                className="form-control"
                type="text"
                placeholder={this.props.strings.ONLINENAME}
              />
            </div>
            
          </div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.ONLINEPHONE}</b>
              </h5>
            </div>
            <div className="col-md-9 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.ONLINEPHONE}
                onChange={this.onChange.bind(this, "ONLINEPHONE")}
                id="txtONLINEPHONE"
                className="form-control"
                type="text"
                placeholder={this.props.strings.ONLINEPHONE}
              />
            </div>
            
          </div>
          



          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.ONLINEEMAIL}</b>
              </h5>
            </div>
            <div className="col-md-9 ">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.ONLINEEMAIL}
                onChange={this.onChange.bind(this, "ONLINEEMAIL")}
                id="txtONLINEEMAIL"
                className="form-control"
                type="text"
                placeholder={this.props.strings.ONLINEEMAIL}
              />
            </div>


            
          </div>

          </div>
          </div>)}
{/* -----------------------------------------PEP----------------------------- */}
          <div className = "col-md-12 row module">
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="" onMouseOver={this.handleMouseIn2.bind(this)} onMouseOut={this.handleMouseOut2.bind(this)}>
                <b>{this.props.strings.ISPEP}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <DropdownFactory
                      disabled={isDisableWhenView}
                      //onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                      onChange={this.onChange.bind(this)}
                      ID="drdISPEP"
                      value="ISPEP"
                      CDTYPE="SY"
                      CDNAME="YESNO"
                      CDVAL={this.state.generalInformation.ISPEP}
                    />
            </div>
            <div className="col-md-12" style={tooltipStyle2}>
                            {renderTooltip2}
                            </div>
          </div>
          
          {this.state.generalInformation.ISPEP == 'Y' && (<div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.FAMILYNAME1}</b>
              </h5>
            </div>
            <div className="col-md-3 fixWidthDatePickerForOthers">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.FAMILYNAME1}
                onChange={this.onChange.bind(this, "FAMILYNAME1")}
                id="txtFAMILYNAME1"
                className="form-control"
                type="text"
                placeholder={this.props.strings.FAMILYNAME1}
              />
            </div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.NAME1}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.NAME1}
                onChange={this.onChange.bind(this, "NAME1")}
                id="txtNAME1"
                className="form-control"
                type="text"
                placeholder={this.props.strings.NAME1}
              />
            </div>
          </div>
          <div className="col-md-12 row">
            
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.FAMILYNAME2}</b>
              </h5>
            </div>
            <div className="col-md-3 fixWidthDatePickerForOthers">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.FAMILYNAME2}
                onChange={this.onChange.bind(this, "FAMILYNAME2")}
                id="txtFAMILYNAME2"
                className="form-control"
                type="text"
                placeholder={this.props.strings.FAMILYNAME2}
              />
            </div>
            <div className="col-md-3">
              <h5 className="">
                <b>{this.props.strings.NAME2}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <input
                
                disabled={isDisableWhenView}
                value={this.state.generalInformation.NAME2}
                onChange={this.onChange.bind(this, "NAME2")}
                id="txtNAME2"
                className="form-control"
                type="text"
                placeholder={this.props.strings.NAME2}
              />
            </div>
          </div>
          </div>)}
          </div>
          {/* -------------------------------------------------------------------------- */}
          <div className="col-md-12 row module">
            {isVIEW && (
              <div className="col-md-12 row">
                <div className="col-md-3">
                  <h5 className="highlight">
                    <b>{this.props.strings.investtype}</b>
                  </h5>
                </div>
                <div className="col-md-3">
                  <DropdownFactory
                    disabled={isDisableWhenView}
                    onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                    onChange={this.onChange.bind(this)}
                    ID="drdInvesttype"
                    value="INVESTTYPE"
                    CDTYPE="CF"
                    CDNAME="INVESTTYPE"
                    CDVAL={this.state.generalInformation.INVESTTYPE}
                  />
                </div>
                <div className="col-md-3">
                  {/* <h5 className="highlight"><b>{this.props.strings.acctgrp}</b></h5> */}
                </div>
                <div className="col-md-3">
                  {/* <DropdownFactory onSetDefaultValue={this.onSetDefaultValue} onChange={this.onChange.bind(this)} ID="drdAcctgrp" value="ACCTGRP" CDTYPE="CF" CDNAME="ACCTGRP" CDVAL={this.state.generalInformation.ACCTGRP} /> */}
                </div>
              </div>
            )}
            {ISCN ? <div className="col-md-12 row">
          
          <div className="col-md-3 " >
            <h5 className="highlight" onMouseOver={this.handleMouseIn3.bind(this)} onMouseOut={this.handleMouseOut3.bind(this)}>
              <b>{this.props.strings.isFatca}</b>
            </h5>
          </div>
          <div className="col-md-3">
            <DropdownFactory
                      disabled={isDisableWhenView}
                      //onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                      onChange={this.onChange.bind(this)}
                      ID="drdISFATCA"
                      value="ISFATCA"
                      CDTYPE="SY"
                      CDNAME="YESNO"
                      CDVAL={this.state.generalInformation.ISFATCA}
                    />
            
          </div>
          <div className="col-md-12" style={tooltipStyle3}>
                            <div  style={tooltipStyle3}>
                            {renderTooltip}
                            </div>
                            </div>
        </div> :
        <div className="col-md-12 row" >
          <div className="col-md-3 ">
            <h5 className="highlight" onMouseOver={this.handleMouseIn3.bind(this)} onMouseOut={this.handleMouseOut3.bind(this)}>
              <b>{this.props.strings.isFatca}</b>
            </h5>
          </div>
          <div className="col-md-3">
          <DropdownFactory
                      disabled={isDisableWhenView}
                      //onSetDefaultValue={this.onSetDefaultValue.bind(this)}
                      onChange={this.onChange.bind(this)}
                      ID="drdISFATCA"
                      value="ISFATCA"
                      CDTYPE="SY"
                      CDNAME="YESNO"
                      CDVAL={this.state.generalInformation.ISFATCA}
                    />
            
          </div>
          <div className="col-md-12" style={tooltipStyle3}>
                            <div  style={tooltipStyle3}>
                            {renderTooltip}
                            </div>
                            </div>
        </div>}
        
        <div className="col-md-12 row">
            <div className="col-md-12 row">
              {this.props.language == "vie" && (
                <textarea
                  readOnly="readOnly"
                  rows={5}
                  value="
                  Nh√† ƒë·∫ßu t∆∞ ƒë·ªÅ ngh·ªã v√† C√¥ng ty C·ªï ph·∫ßn Qu·∫£n l√Ω Qu·ªπ ƒë·∫ßu t∆∞ MB (‚ÄúMB CAPITAL‚Äù) ch·∫•p thu·∫≠n m·ªü t√†i kho·∫£n giao d·ªãch ch·ª©ng ch·ªâ qu·ªπ m·ªü v√† cung c·∫•p D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v·ªõi c√°c cam k·∫øt v√† ƒëi·ªÅu kho·∫£n, ƒëi·ªÅu ki·ªán nh∆∞ sau:&#13;&#10;

                  I. CAM K·∫æT C·ª¶A NH√Ä ƒê·∫¶U T∆Ø KHI M·ªû T√ÄI KHO·∫¢N GIAO D·ªäCH CH·ª®NG CH·ªà QU·ª∏&#13;&#10;
                  1. ƒê√£ t√¨m hi·ªÉu r√µ B·∫£n c√°o b·∫°ch v√† ƒêi·ªÅu l·ªá qu·ªπ/ c√°c qu·ªπ ƒë·∫ßu t∆∞ do MB CAPITAL m√† Nh√† ƒë·∫ßu t∆∞ d·ª± ki·∫øn ƒë·∫ßu t∆∞, c≈©ng nh∆∞ c√°c r·ªßi ro c·ªßa vi·ªác ƒë·∫ßu t∆∞ v√†o Qu·ªπ.&#13;&#10;
                  2. Hi·ªÉu r·∫±ng ƒë√¢y l√† s·∫£n ph·∫©m ƒë·∫ßu t∆∞, c√≥ th·ªÉ c√≥ nh·ªØng r·ªßi ro ti·ªÅm t√†ng khi ƒë·∫ßu t∆∞ v√†o Qu·ªπ. Gi√° tr·ªã t√†i s·∫£n r√≤ng/ƒë∆°n v·ªã qu·ªπ c√≥ th·ªÉ tƒÉng ho·∫∑c gi·∫£m v√† l·ª£i nhu·∫≠n k·ª≥ v·ªçng c≈©ng nh∆∞ c√°c k·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c trong qu√° kh·ª© c·ªßa Qu·ªπ kh√¥ng ƒë·∫£m b·∫£o cho k·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c trong t∆∞∆°ng lai. Nh√† ƒë·∫ßu t∆∞ ho√†n to√†n ch·ªãu tr√°ch nhi·ªám li√™n quan ƒë·∫øn vi·ªác ƒë·∫ßu t∆∞ v√†o ch·ª©ng ch·ªâ qu·ªπ.&#13;&#10;
                  3. M·ªçi th√¥ng tin c√° nh√¢n cung c·∫•p cho ƒê·∫°i l√Ω ph√¢n ph·ªëi ho·∫∑c MB CAPITAL l√† ch√≠nh x√°c v√† s·∫Ω th√¥ng b√°o b·∫±ng vƒÉn b·∫£n cho ƒê·∫°i l√Ω ph√¢n ph·ªëi ho·∫∑c MB CAPITAL m·ªçi thay ƒë·ªïi v√† c·∫≠p nh·∫≠t (n·∫øu c√≥).&#13;&#10;
                  4. Hi·ªÉu r·∫±ng MB CAPITAL c√≥ to√†n quy·ªÅn thay ƒë·ªïi c√°c m·∫´u phi·∫øu l·ªánh m√† kh√¥ng c·∫ßn th√¥ng b√°o tr∆∞·ªõc.&#13;&#10;
                  &#13;&#10;
                  II. ƒêI·ªÄU KHO·∫¢N V√Ä ƒêI·ªÄU KI·ªÜN C·ª¶A D·ªäCH V·ª§ GIAO D·ªäCH TR·ª∞C TUY·∫æN&#13;&#10;
                  ƒêI·ªÄU 1.	GI·∫¢I TH√çCH T·ª™ NG·ªÆ&#13;&#10;
                    Trong ph·∫°m vi ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y, c√°c t·ª´ ng·ªØ d∆∞·ªõi ƒë√¢y ƒë∆∞·ª£c hi·ªÉu nh∆∞ sau:&#13;&#10;
                  1.1.	MB CAPITAL: l√† C√¥ng ty C·ªï ph·∫ßn Qu·∫£n l√Ω Qu·ªπ ƒë·∫ßu t∆∞ MB.&#13;&#10;
                  1.2.	Nh√† ƒë·∫ßu t∆∞: l√† c√° nh√¢n, t·ªï ch·ª©c ƒëƒÉng k√Ω s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v√† ƒë∆∞·ª£c MB CAPITAL ch·∫•p thu·∫≠n.&#13;&#10;
                  1.3.	D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn (‚ÄúD·ªãch v·ª•‚Äù): l√† d·ªãch v·ª• do MB CAPITAL cung c·∫•p th√¥ng qua m·∫°ng internet, cho ph√©p Nh√† ƒë·∫ßu t∆∞ th·ª±c hi·ªán g·ª≠i c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch, thanh to√°n bao g·ªìm nh∆∞ng kh√¥ng gi·ªõi h·∫°n: truy v·∫•n th√¥ng tin s·ªë d∆∞ t√†i kho·∫£n, truy v·∫•n l·ªãch s·ª≠ giao d·ªãch, th·ª±c hi·ªán mua b√°n ch·ª©ng ch·ªâ qu·ªπ, c√°c giao d·ªãch, ti·ªán √≠ch kh√°c ƒë∆∞·ª£c MB CAPITAL cung c·∫•p th√¥ng qua vi·ªác truy c·∫≠p v√†o Website MB CAPITAL.&#13;&#10;
                  1.4.	OTP (One Time Password): M·∫≠t kh·∫©u s·ª≠ d·ª•ng m·ªôt l·∫ßn, ƒë∆∞·ª£c sinh ra t·ª´ ph∆∞∆°ng th·ª©c x√°c th·ª±c theo quy ƒë·ªãnh c·ªßa MB Capital s·ª≠ d·ª•ng cho vi·ªác x√°c th·ª±c c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch/thanh to√°n th√¥ng qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn.&#13;&#10;
                  1.5.	Website MB CAPITAL: l√† trang th√¥ng tin ƒëi·ªán t·ª≠ t·∫°i ƒë·ªãa ch·ªâ: https://mbcapital.com.vn, https://online.mbcapital.com.vn ho·∫∑c c√°c ƒë·ªãa ch·ªâ kh√°c theo quy ƒë·ªãnh c·ªßa MB CAPITAL.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 2.	N·ªòI DUNG D·ªäCH V·ª§ GIAO D·ªäCH TR·ª∞C TUY·∫æN &#13;&#10;
                  2.1.	Ph∆∞∆°ng th·ª©c s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn &#13;&#10;
                  2.1.1.	Nh√† ƒë·∫ßu t∆∞ truy c·∫≠p D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ƒë·ªÉ ƒëƒÉng k√Ω, s·ª≠ d·ª•ng c√°c s·∫£n ph·∫©m, d·ªãch v·ª• c·ªßa MB CAPITAL, c√°c ti·ªán √≠ch kh√°c do MB CAPITAL cung c·∫•p t·ª´ng th·ªùi k·ª≥ th√¥ng qua vi·ªác kh·ªüi t·∫°o v√† g·ª≠i cho MB CAPITAL c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch/thanh to√°n, l·ªánh truy v·∫•n th√¥ng tin ‚Ä¶&#13;&#10;
                  2.1.2.	Nh√† ƒë·∫ßu t∆∞ ph·∫£i tu√¢n th·ªß, th·ª±c hi·ªán ƒë√∫ng theo h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c·ªßa c√°c D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn do MB CAPITAL ban h√†nh v√† ƒëƒÉng t·∫£i tr√™n Website MB CAPITAL ho·∫∑c c√°c h∆∞·ªõng d·∫´n tr√™n giao di·ªán s·ª≠ d·ª•ng c·ªßa D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn . Tr∆∞·ªùng h·ª£p c√≥ s·ª± thay ƒë·ªïi v·ªÅ h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng d·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c MB CAPITAL ƒëƒÉng t·∫£i t·∫°i Website MB CAPITAL.&#13;&#10;
                  2.1.3.	Vi·ªác s·ª≠ d·ª•ng c√°c s·∫£n ph·∫©m, d·ªãch v·ª•, ti·ªán √≠ch th√¥ng qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ph·∫£i tu√¢n th·ªß theo c√°c quy ƒë·ªãnh nghi·ªáp v·ª•, h∆∞·ªõng d·∫´n, ƒëi·ªÅu ki·ªán ƒëi·ªÅu kho·∫£n c·ªßa MB CAPITAL ƒë·ªëi v·ªõi s·∫£n ph·∫©m, d·ªãch v·ª•, ti·ªán √≠ch ƒë√≥.&#13;&#10;
                  2.2.	Nguy√™n t·∫Øc s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn &#13;&#10;
                  2.2.1.	Nh√† ƒë·∫ßu t∆∞ ch·∫•p nh·∫≠n r·∫±ng b·∫•t c·ª© h√†nh ƒë·ªông n√†o: ƒëƒÉng nh·∫≠p/truy c·∫≠p v√†o Website MB CAPITAL b·∫±ng ch√≠nh t√™n ƒëƒÉng nh·∫≠p v·ªõi ƒë√∫ng m·∫≠t kh·∫©u c·ªßa Nh√† ƒë·∫ßu t∆∞ ho·∫∑c ho·∫∑c s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c kh√°c theo quy ƒë·ªãnh c·ªßa D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v·ªõi ƒë√∫ng m·∫≠t kh·∫©u v√†/ho·∫∑c k·∫øt h·ª£p ph∆∞∆°ng ph√°p x√°c th·ª±c kh√°c do MB CAPITAL cung c·∫•p cho Nh√† ƒë·∫ßu t∆∞, ƒë·ªÉ th·ª±c hi·ªán t·∫°o v√† g·ª≠i c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch cho MB CAPITAL th√¨ c√°c l·ªánh/ch·ªâ th·ªã n√†y ƒë∆∞·ª£c xem l√† do ch√≠nh Nh√† ƒë·∫ßu t∆∞ th·ª±c hi·ªán v√† Nh√† ƒë·∫ßu t∆∞ ch·ªãu tr√°ch nhi·ªám v·ªÅ t√≠nh ch√≠nh x√°c, trung th·ª±c, h·ª£p ph√°p c·ªßa c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch n√†y.&#13;&#10;
                  2.2.2.	C√°c giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, th·ª±c hi·ªán th√†nh c√¥ng theo c√°c l·ªánh/ch·ªâ th·ªã do Nh√† ƒë·∫ßu t∆∞ t·∫°o l·∫≠p v√† g·ª≠i cho MB CAPITAL th√¥ng qua c√°c D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn l√† c√≥ gi√° tr·ªã v√† kh√¥ng h·ªßy ngang, Nh√† ƒë·∫ßu t∆∞ ch·ªãu tr√°ch nhi·ªám ƒë·ªëi v·ªõi c√°c giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, th·ª±c hi·ªán.&#13;&#10;
                  2.2.3.	D·ªØ li·ªáu, th√¥ng tin ghi nh·∫≠n tr√™n h·ªá th·ªëng c·ªßa MB CAPITAL d∆∞·ªõi b·∫•t k·ª≥ h√¨nh th·ª©c n√†o v·ªÅ vi·ªác nh·∫≠n v√† x·ª≠ l√Ω c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch c·ªßa Nh√† ƒë·∫ßu t∆∞ c≈©ng nh∆∞ n·ªôi dung c√°c l·ªánh/ch·ªâ th·ªã n√†y l√† b·∫±ng ch·ª©ng c√≥ gi√° tr·ªã ph√°p l√Ω r·∫±ng Nh√† ƒë·∫ßu t∆∞ ƒë√£ s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v√† Nh√† ƒë·∫ßu t∆∞ ch·ªãu tr√°ch nhi·ªám v·ªÅ c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch n√†y.&#13;&#10;
                  2.3.	Th·ªùi ƒëi·ªÉm, th·ªùi h·∫°n s·ª≠ d·ª•ng D·ªãch v·ª•&#13;&#10;
                  Nh√† ƒë·∫ßu t∆∞ ƒë∆∞·ª£c s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn sau khi ho√†n th√†nh th·ªß t·ª•c ƒëƒÉng k√Ω v√† h·ªá th·ªëng c·ªßa MB CAPITAL k√≠ch ho·∫°t th√†nh c√¥ng d·ªãch v·ª• cho ƒë·∫øn khi thu·ªôc m·ªôt trong c√°c tr∆∞·ªùng h·ª£p ch·∫•m d·ª©t s·ª≠ d·ª•ng theo quy ƒë·ªãnh t·∫°i ƒêi·ªÅu 11 ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 3.	PH√ç D·ªäCH V·ª§ V√Ä PH∆Ø∆†NG TH·ª®C THU PH√ç &#13;&#10;
                  3.1.	Ph√≠ d·ªãch v·ª•&#13;&#10;
                  Ph√≠ d·ªãch v·ª• l√† c√°c kho·∫£n ph√≠ Nh√† ƒë·∫ßu t∆∞ ph·∫£i tr·∫£ khi s·ª≠ d·ª•ng c√°c D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn . Bi·ªÉu ph√≠ s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn do MB CAPITAL quy ƒë·ªãnh, c√≥ th·ªÉ thay ƒë·ªïi theo t·ª´ng th·ªùi k·ª≥ ph√π h·ª£p quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t v√† c√≥ gi√° tr·ªã hi·ªáu l·ª±c v·ªõi Nh√† ƒë·∫ßu t∆∞.&#13;&#10;
                  3.2.	Ph∆∞∆°ng th·ª©c thu ph√≠&#13;&#10;
                  3.2.1.	MB CAPITAL t·ª± ƒë·ªông tr√≠ch t·ª´ s·ªë ti·ªÅn mua/ b√°n ch·ª©ng ch·ªâ qu·ªπ c·ªßa Nh√† ƒë·∫ßu t∆∞ ƒë·ªëi v·ªõi c√°c d·ªãch v·ª• c√≥ thu ph√≠ theo ƒë·ªãnh k·ª≥ ho·∫∑c theo giao d·ªãch ph√°t sinh cƒÉn c·ª© theo bi·ªÉu ph√≠ c√≥ hi·ªáu l·ª±c t·∫°i th·ªùi ƒëi·ªÉm ph√°t sinh. &#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 4.	KH·ªûI T·∫†O, G·ª¨I, NH·∫¨N, TH·ª∞C HI·ªÜN L·ªÜNH/CH·ªà TH·ªä GIAO D·ªäCH&#13;&#10;
                  4.1.	Kh·ªüi t·∫°o, g·ª≠i l·ªánh/ch·ªâ th·ªã giao d·ªãch&#13;&#10;
                  4.1.1.	L·ªánh/ch·ªâ th·ªã giao d·ªãch, thanh to√°n qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ƒë∆∞·ª£c coi l√† h·ª£p ph√°p, h·ª£p l·ªá khi ƒë√°p ·ª©ng c√°c ƒëi·ªÅu ki·ªán sau: &#13;&#10;
                  4.1.1.1.	Nh√† ƒë·∫ßu t∆∞ th·ª±c hi·ªán theo ƒë√∫ng h∆∞·ªõng d·∫´n c·ªßa MB CAPITAL.&#13;&#10;
                  4.1.1.2.	L·ªánh/ch·ªâ th·ªã giao d·ªãch ƒë∆∞·ª£c t·∫°o l·∫≠p, g·ª≠i t·ª´ ƒë√∫ng t√†i kho·∫£n truy c·∫≠p D·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c Nh√† ƒë·∫ßu t∆∞ ƒëƒÉng k√Ω s·ª≠ d·ª•ng v·ªõi MB CAPITAL v√†/ho·∫∑c do MB CAPITAL cung c·∫•p.&#13;&#10;
                  4.1.1.3.	ƒê·ªëi v·ªõi l·ªánh/ch·ªâ th·ªã giao d·ªãch/thanh to√°n ph·∫£i ƒë·∫ßy ƒë·ªß n·ªôi dung theo quy ƒë·ªãnh c·ªßa MB CAPITAL.&#13;&#10;
                  4.1.1.4.	ƒê∆∞·ª£c x√°c th·ª±c/ƒë·ªãnh danh theo ph∆∞∆°ng th·ª©c do MB CAPITAL quy ƒë·ªãnh ƒë·ªëi v·ªõi D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ƒë√≥; &#13;&#10;
                  4.1.1.5.	C√°c ƒëi·ªÅu ki·ªán kh√°c theo quy ƒë·ªãnh c·ªßa MB CAPITAL (n·∫øu c√≥).&#13;&#10;
                  MB CAPITAL ƒë∆∞·ª£c quy·ªÅn t·ª´ ch·ªëi th·ª±c hi·ªán l·ªánh/ch·ªâ th·ªã giao d·ªãch, thanh to√°n kh√¥ng h·ª£p ph√°p, h·ª£p l·ªá.&#13;&#10;
                  4.1.2.	Nh√† ƒë·∫ßu t∆∞ c√≥ th·ªÉ kh·ªüi t·∫°o v√† g·ª≠i l·ªánh/ch·ªâ th·ªã giao d·ªãch, thanh to√°n qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v√†o b·∫•t c·ª© th·ªùi gian n√†o trong ng√†y. &#13;&#10;
                  4.1.3.	L·ªánh/ch·ªâ th·ªã giao d·ªãch c·ªßa Nh√† ƒë·∫ßu t∆∞ qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ƒë∆∞·ª£c coi l√† ƒë√£ g·ª≠i khi l·ªánh/ch·ªâ th·ªã giao d·ªãch ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng v√†o h·ªá th·ªëng th√¥ng tin c·ªßa MB CAPITAL v√† n·∫±m ngo√†i s·ª± ki·ªÉm so√°t c·ªßa Nh√† ƒë·∫ßu t∆∞.&#13;&#10;
                  4.2.	Nh·∫≠n l·ªánh/ch·ªâ th·ªã giao d·ªãch&#13;&#10;
                  MB CAPITAL ƒë∆∞·ª£c coi l√† ƒë√£ nh·∫≠n ƒë∆∞·ª£c l·ªánh/ch·ªâ th·ªã giao d·ªãch c·ªßa Nh√† ƒë·∫ßu t∆∞ th√¥ng qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn khi l·ªánh/ch·ªâ th·ªã giao d·ªãch ƒë√£ ƒë∆∞·ª£c ghi nh·∫≠n v√†o h·ªá th·ªëng qu·∫£n l√Ω giao d·ªãch ƒëi·ªán t·ª≠ c·ªßa MB CAPITAL ƒë√∫ng c√°ch v√† c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c.&#13;&#10;
                  4.3.	H·ªßy l·ªánh/ch·ªâ th·ªã giao d·ªãch&#13;&#10;
                  Tr∆∞·ªùng h·ª£p Nh√† ƒë·∫ßu t∆∞ mu·ªën h·ªßy l·ªánh/ch·ªâ th·ªã giao d·ªãch ƒë√£ g·ª≠i cho MB CAPITAL th√¥ng qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn , MB CAPITAL ƒë∆∞·ª£c xem x√©t (nh∆∞ng kh√¥ng b·∫Øt bu·ªôc) th·ª±c hi·ªán vi·ªác h·ªßy l·ªánh/ch·ªâ th·ªã c·ªßa Nh√† ƒë·∫ßu t∆∞ n·∫øu MB CAPITAL ch∆∞a x·ª≠ l√Ω/th·ª±c hi·ªán giao d·ªãch tr√™n h·ªá th·ªëng theo l·ªánh/ch·ªâ th·ªã c·ªßa Nh√† ƒë·∫ßu t∆∞ v√† vi·ªác h·ªßy l·ªánh/ch·ªâ th·ªã giao d·ªãch kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn l·ª£i √≠ch c·ªßa MB CAPITAL c≈©ng nh∆∞ quy·ªÅn, l·ª£i √≠ch c·ªßa b·∫•t k·ª≥ b√™n th·ª© ba n√†o kh√°c.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 5.	QUY·ªÄN V√Ä TR√ÅCH NHI·ªÜM C·ª¶A NH√Ä ƒê·∫¶U T∆Ø&#13;&#10;
                  5.1.	Quy·ªÅn c·ªßa Nh√† ƒë·∫ßu t∆∞&#13;&#10;
                  5.1.1.	S·ª≠ d·ª•ng c√°c s·∫£n ph·∫©m, d·ªãch v·ª•, ti·ªán √≠ch c·ªßa MB CAPITAL th√¥ng qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn trong ph·∫°m vi ƒë√£ ƒëƒÉng k√Ω v·ªõi MB CAPITAL.&#13;&#10;
                  5.1.2.	Thay ƒë·ªïi th√¥ng tin Nh√† ƒë·∫ßu t∆∞ ƒë√£ ƒëƒÉng k√Ω, y√™u c·∫ßu c·∫•p l·∫°i m·∫≠t kh·∫©u,  thay ƒë·ªïi ph∆∞∆°ng th·ª©c ƒë·ªãnh danh Nh√† ƒë·∫ßu t∆∞‚Ä¶&#13;&#10;
                  5.1.3.	C√≥ quy·ªÅn ng·ª´ng s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn sau khi th√¥ng b√°o b·∫±ng vƒÉn b·∫£n cho tr·ª• s·ªü c·ªßa MB CAPITAL n∆°i Nh√† ƒë·∫ßu t∆∞ ƒëƒÉng k√Ω s·ª≠ d·ª•ng d·ªãch v·ª•, bao g·ªìm c·∫£ tr∆∞·ªùng h·ª£p Nh√† ƒë·∫ßu t∆∞ kh√¥ng ƒë·ªìng √Ω v·ªõi c√°c n·ªôi dung s·ª≠a ƒë·ªïi, b·ªï sung c·ªßa Ph√≠ d·ªãch v·ª• v√† ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán do MB CAPITAL ban h√†nh.&#13;&#10;
                  5.1.4.	C√≥ quy·ªÅn k√≠ch ho·∫°t v√† s·ª≠ d·ª•ng c√°c D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn gia tƒÉng kh√°c th√¥ng qua c√°c ph∆∞∆°ng th·ª©c ƒëƒÉng k√Ω v√† k√≠ch ho·∫°t do MB CAPITAL cung c·∫•p trong t·ª´ng th·ªùi k·ª≥.&#13;&#10;
                  5.1.5.	G·ª≠i y√™u c·∫ßu h·ªó tr·ª£, tra so√°t, khi·∫øu n·∫°i trong qu√° tr√¨nh s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn cho MB CAPITAL th√¥ng qua c√°c h√¨nh th·ª©c: ƒê·∫øn Tr·ª• s·ªü MB CAPITAL ho·∫∑c g·ªçi ƒëi·ªán tho·∫°i ƒë·∫øn T·ªïng ƒë√†i h·ªó tr·ª£ d·ªãch v·ª• Nh√† ƒë·∫ßu t∆∞ MB CAPITAL theo s·ªë 02437262808, ho·∫∑c h√¨nh th·ª©c kh√°c theo quy ƒëinh c·ªßa MB CAPITAL.&#13;&#10;
                  5.2.	Tr√°ch nhi·ªám c·ªßa Nh√† ƒë·∫ßu t∆∞&#13;&#10;
                  5.2.1.	Cung c·∫•p ƒë·∫ßy ƒë·ªß, ch√≠nh x√°c c√°c th√¥ng tin c·∫ßn thi·∫øt khi ƒëƒÉng k√Ω v√†/ho·∫∑c ph√°t sinh trong qu√° tr√¨nh s·ª≠ d·ª•ng d·ªãch v·ª• theo y√™u c·∫ßu c·ªßa MB CAPITAL.&#13;&#10;
                  5.2.2.	Tu√¢n th·ªß c√°c quy ƒë·ªãnh ph√°p lu·∫≠t v√† quy ƒë·ªãnh c·ªßa MB CAPITAL li√™n quan ƒë·∫øn vi·ªác ƒëƒÉng k√Ω v√† s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn .&#13;&#10;
                  5.2.3.	C·∫≠p nh·∫≠t, theo d√µi c√°c th√¥ng tin, th√¥ng b√°o, quy ƒë·ªãnh, h∆∞·ªõng d·∫´n v·ªÅ s·ª≠ d·ª•ng D·ªãch v·ª• c·ªßa MB CAPITAL theo c√°c ph∆∞∆°ng th·ª©c nh∆∞: (i) c·∫≠p nh·∫≠t tr√™n Website MB CAPITAL; (ii) t√†i li·ªáu h∆∞·ªõng d·∫´n t·∫°i Tr·ª• s·ªü MB CAPITAL; (iii) th√¥ng b√°o, h∆∞·ªõng d·∫´n c·ªßa MB CAPITAL qua email, tin nh·∫Øn sms; (iv) c√°c ph∆∞∆°ng th·ª©c kh√°c theo quy ƒë·ªãnh c·ªßa MB CAPITAL trong t·ª´ng th·ªùi k·ª≥.&#13;&#10;
                  5.2.4.	ƒê·ªìng √Ω s·ª≠ d·ª•ng c√°c th√¥ng tin, m·∫´u ch·ªØ k√Ω ƒë√£ ƒëƒÉng k√Ω theo ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y ƒë·ªÉ s·ª≠ d·ª•ng c√°c d·ªãch v·ª• ƒëi·ªán t·ª≠ gia tƒÉng kh√°c do MB CAPITAL cung c·∫•p trong t·ª´ng th·ªùi k·ª≥.&#13;&#10;
                  5.2.5.	Qu·∫£n l√Ω, b·∫£o m·∫≠t t√™n truy c·∫≠p D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v√† m·∫≠t kh·∫©u, c√°c thi·∫øt b·ªã x√°c th·ª±c/ƒë·ªãnh danh Nh√† ƒë·∫ßu t∆∞, b·∫£o ƒë·∫£m c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch ƒë∆∞·ª£c g·ª≠i t·ª´ ƒë√∫ng ng∆∞·ªùi c√≥ th·∫©m quy·ªÅn c·ªßa Nh√† ƒë·∫ßu t∆∞ ƒë√£ ƒëƒÉng k√Ω. &#13;&#10;
                  5.2.6.	Ch·ªãu tr√°ch nhi·ªám v·ªõi c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch ƒë∆∞·ª£c l·∫≠p b·ªüi t√™n truy c·∫≠p, m·∫≠t kh·∫©u v√†/ho·∫∑c c√°c y·∫øu t·ªë x√°c th·ª±c/ƒë·ªãnh danh c·ªßa Nh√† ƒë·∫ßu t∆∞ qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn .&#13;&#10;
                  5.2.7.	ƒê·ªìng √Ω s·ª≠ d·ª•ng c√°c d·ªØ li·ªáu li√™n quan ƒë·∫øn vi·ªác s·ª≠ d·ª•ng d·ªãch v·ª• ƒë∆∞·ª£c xu·∫•t ra t·ª´ h·ªá th·ªëng c·ªßa MB CAPITAL ho·∫∑c b√™n th·ª© ba ph·ªëi h·ª£p cung c·∫•p d·ªãch v·ª• ƒë·ªÉ l√†m c∆° s·ªü gi·∫£i quy·∫øt tranh ch·∫•p gi·ªØa Nh√† ƒë·∫ßu t∆∞ v√† c√°c b√™n li√™n quan.&#13;&#10;
                  5.2.8.	Ki·ªÉm tra t√≠nh h·ª£p l√Ω, h·ª£p l·ªá v√† ch·ªãu tr√°ch nhi·ªám v·ªÅ c√°c th√¥ng tin c·ªßa b√™n th·ª• h∆∞·ªüng tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh/ch·ªâ th·ªã giao d·ªãch.&#13;&#10;
                  5.2.9.	Ch·ªãu tr√°ch nhi·ªám v·ªõi c√°c thi·ªát h·∫°i x·∫£y ra/ph√°t sinh do: (i) Nh√† ƒë·∫ßu t∆∞ ƒë·ªÉ l·ªô ho·∫∑c b·ªã ng∆∞·ªùi kh√°c s·ª≠ d·ª•ng t√™n truy c·∫≠p, m·∫≠t kh·∫©u, thi·∫øt b·ªã b·∫£o m·∫≠t, ch·ªØ k√Ω ƒëi·ªán t·ª≠, ch·ª©ng th∆∞ ƒëi·ªán t·ª≠ v√¨ b·∫•t c·ª© l√Ω do g√¨; (ii) vi·ªác kh√¥ng h·ªßy b·ªè, ch·∫≠m th·ª±c hi·ªán, x·ª≠ l√Ω c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn c·ªßa Nh√† ƒë·∫ßu t∆∞ khi c√°c l·ªánh/ch·ªâ th·ªã n√†y ƒë√£ ƒë∆∞·ª£c MB CAPITAL x·ª≠ l√Ω/th·ª±c hi·ªán; (iii) tranh ch·∫•p (n·∫øu c√≥) gi·ªØa Nh√† ƒë·∫ßu t∆∞ v√† ƒë∆°n v·ªã th·ª• h∆∞·ªüng theo l·ªánh/ch·ªâ th·ªã giao d·ªãch c·ªßa Nh√† ƒë·∫ßu t∆∞ qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn .&#13;&#10;
                  5.2.10.	Th√¥ng b√°o, ho√†n tr·∫£ l·∫°i cho MB CAPITAL: (i) c√°c kho·∫£n ti·ªÅn do sai s√≥t, nh·∫ßm l·∫´n ƒë∆∞·ª£c MB CAPITAL chuy·ªÉn th·ª´a/chuy·ªÉn nh·∫ßm v√†o t√†i kho·∫£n c·ªßa Nh√† ƒë·∫ßu t∆∞ (bao g·ªìm c·∫£ c√°c l·ªói t√°c nghi·ªáp, s·ª± c·ªë h·ªá th·ªëng MB CAPITAL); (ii) c√°c kho·∫£n ti·ªÅn Nh√† ƒë·∫ßu t∆∞ nh·∫≠n ƒë∆∞·ª£c t·ª´ MB CAPITAL qua c√°c giao d·ªãch b·ªã nh·∫ßm l·∫´n, l·ªói k·ªπ thu·∫≠t m√† Nh√† ƒë·∫ßu t∆∞ kh√¥ng ch·ª©ng minh ƒë∆∞·ª£c quy·ªÅn s·ªü h·ªØu h·ª£p ph√°p. &#13;&#10;
                  5.2.11.	B·∫£o ƒë·∫£m c√≥ ƒë·ªß s·ªë d∆∞ tr√™n t√†i kho·∫£n ƒëƒÉng k√Ω s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn khi th·ª±c hi·ªán l·ªánh b√°n ch·ª©ng ch·ªâ qu·ªπ v√† thanh to√°n c√°c kho·∫£n ph√≠ theo quy ƒë·ªãnh c·ªßa MB CAPITAL.&#13;&#10;
                  5.2.12.	Th√¥ng b√°o k·ªãp th·ªùi cho MB CAPITAL khi ph√°t hi·ªán th·∫•y sai s√≥t, nh·∫ßm l·∫´n tr√™n t√†i kho·∫£n ƒëƒÉng k√Ω s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ho·∫∑c c√≥ l·ªánh/ch·ªâ th·ªã giao d·ªãch thanh to√°n b·∫•t h·ª£p ph√°p tr√™n t√†i kho·∫£n ƒëƒÉng k√Ω s·ª≠ d·ª•ng d·ªãch v·ª•.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 6.	QUY·ªÄN V√Ä TR√ÅCH NHI·ªÜM C·ª¶A MB CAPITAL&#13;&#10;
                  6.1.	Quy·ªÅn c·ªßa MB CAPITAL&#13;&#10;
                  6.1.1.	T·ª´ ch·ªëi x·ª≠ l√Ω, th·ª±c hi·ªán c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch, thanh to√°n kh√¥ng h·ª£p l·ªá, h·ª£p ph√°p theo quy ƒë·ªãnh c·ªßa MB CAPITAL, quy ƒë·ªãnh ph√°p lu·∫≠t.&#13;&#10;
                  6.1.2.	Trong tr∆∞·ªùng h·ª£p c·∫ßn thi·∫øt, MB CAPITAL ƒë∆∞·ª£c quy·ªÅn y√™u c·∫ßu Nh√† ƒë·∫ßu t∆∞ cung c·∫•p c√°c vƒÉn b·∫£n, t√†i li·ªáu c·∫ßn thi·∫øt ƒë·ªÉ MB CAPITAL c√≥ ƒë·ªß c∆° s·ªü th·ª±c hi·ªán x·ª≠ l√Ω, th·ª±c hi·ªán l·ªánh/ch·ªâ th·ªã giao d·ªãch c·ªßa Nh√† ƒë·∫ßu t∆∞ g·ª≠i cho MB CAPITAL qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn .&#13;&#10;
                  6.1.3.	Kh√≥a quy·ªÅn truy c·∫≠p D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn n·∫øu Nh√† ƒë·∫ßu t∆∞ ƒëƒÉng nh·∫≠p D·ªãch v·ª• kh√¥ng th√†nh c√¥ng qu√° s·ªë l·∫ßn theo quy ƒë·ªãnh c·ªßa MB CAPITAL t·ª´ng th·ªùi k·ª≥.&#13;&#10;
                  6.1.4.	Cung c·∫•p th√¥ng tin li√™n quan ƒë·∫øn Nh√† ƒë·∫ßu t∆∞, t√†i kho·∫£n ƒëƒÉng k√Ω s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v√† c√°c giao d·ªãch ph√°t sinh cho b√™n th·ª© ba trong tr∆∞·ªùng c√°c h·ª£p: (i) ƒë∆∞·ª£c s·ª± ƒë·ªìng √Ω c·ªßa Nh√† ƒë·∫ßu t∆∞; (ii) theo y√™u c·∫ßu c·ªßa c∆° quan Nh√† n∆∞·ªõc c√≥ th·∫©m quy·ªÅn, theo quy ƒë·ªãnh ph√°p lu·∫≠t; (iii) cung c·∫•p cho b√™n th·ª© ba h·ª£p t√°c v·ªõi MB CAPITAL ƒë·ªÉ cung c·∫•p D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ho·∫∑c ƒë·ªÉ h·ªó tr·ª£ tra so√°t, gi·∫£i quy·∫øt c√°c khi·∫øu n·∫°i, tranh ch·∫•p (n·∫øu c√≥) gi·ªØa MB CAPITAL v√† Nh√† ƒë·∫ßu t∆∞ li√™n quan ƒë·∫øn vi·ªác th·ª±c hi·ªán ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y.&#13;&#10;
                  6.2.	Tr√°ch nhi·ªám c·ªßa MB CAPITAL&#13;&#10;
                  6.2.1.	Th·ª±c hi·ªán c√°c l·ªánh/ch·ªâ th·ªã giao d·ªãch ƒë∆∞·ª£c g·ª≠i qua D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn c·ªßa Nh√† ƒë·∫ßu t∆∞ theo quy ƒë·ªãnh t·∫°i ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y, th·ªèa thu·∫≠n gi·ªØa c√°c b√™n.&#13;&#10;
                  6.2.2.	X·ª≠ l√Ω, gi·∫£i quy·∫øt v√† tr·∫£ l·ªùi c√°c khi·∫øu n·∫°i, tra so√°t giao d·ªãch, y√™u c·∫ßu h·ªó tr·ª£ c·ªßa Nh√† ƒë·∫ßu t∆∞.&#13;&#10;
                  6.2.3.	B·∫£o m·∫≠t c√°c th√¥ng tin li√™n quan ƒë·∫øn Nh√† ƒë·∫ßu t∆∞, t√†i kho·∫£n, th√¥ng tin giao d·ªãch c·ªßa Nh√† ƒë·∫ßu t∆∞ theo quy ƒë·ªãnh ph√°p lu·∫≠t.&#13;&#10;
                  6.2.4.	Tu√¢n th·ªß c√°c quy ƒë·ªãnh t·∫°i ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y v√† quy ƒë·ªãnh ph√°p lu·∫≠t.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 7.	B·∫¢O M·∫¨T, B·∫¢O ƒê·∫¢M AN TO√ÄN S·ª¨ D·ª§NG D·ªäCH V·ª§&#13;&#10;
                  ƒê·ªÉ b·∫£o ƒë·∫£m an to√†n trong vi·ªác s·ª≠ d·ª•ng c√°c D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn , Nh√† ƒë·∫ßu t∆∞ c√≥ tr√°ch nhi·ªám:&#13;&#10;
                  7.1.	B·∫£o m·∫≠t t√™n truy c·∫≠p, m·∫≠t kh·∫©u D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v√† ƒëi·ªán tho·∫°i/thi·∫øt b·ªã di ƒë·ªông s·ª≠ d·ª•ng ƒë·ªÉ nh·∫≠n OTP, caÃÅc thi√™ÃÅt biÃ£ baÃâo m√¢Ã£t khaÃÅc do MB CAPITAL cung c√¢ÃÅp ƒë√™Ãâ xaÃÅc th∆∞Ã£c giao diÃ£ch v√† th·ª±c hi·ªán c√°c bi·ªán ph√°p c·∫ßn thi·∫øt ·ªü m·ª©c ƒë·ªô cao nh·∫•t nh·∫±m ph√≤ng ch·ªëng vi·ªác s·ª≠ d·ª•ng tr√°i ph√©p m·∫≠t kh·∫©u d·ªãch v·ª•, thi·∫øt b·ªã sinh OTP.&#13;&#10;
                  7.2.	Th√¥ng b√°o cho MB CAPITAL ƒë·ªÉ kh√≥a d·ªãch v·ª• khi ph√°t hi·ªán ho·∫∑c nghi ng·ªù b·ªã l·ªô m·∫≠t kh·∫©u d·ªãch v·ª• ho·∫∑c c√≥ truy c·∫≠p tr√°i ph√©p D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ho·∫∑c thi·∫øt b·ªã sinh OTP b·ªã m·∫•t c·∫Øp, th·∫•t l·∫°c v√† th·ª±c hi·ªán theo h∆∞·ªõng d·∫´n c·ªßa MB CAPITAL ƒë·ªÉ c√†i ƒë·∫∑t l·∫°i thi·∫øt b·ªã sinh OTP/C√¢ÃÅp laÃ£i thi√™ÃÅt biÃ£ baÃâo m√¢Ã£t khaÃÅc (n√™ÃÅu coÃÅ).&#13;&#10;
                  7.3.	Th√¥ng b√°o cho MB CAPITAL sau ƒë·ªÉ kh√≥a d·ªãch v·ª• khi thu√™ bao di ƒë·ªông b·ªã kh√≥a hai chi·ªÅu ho·∫∑c c√≥ s·ª± chuy·ªÉn ƒë·ªïi ch·ªß s·ªü h·ªØu/chuy·ªÉn ƒë·ªïi s·ª≠ d·ª•ng sim ƒëi·ªán tho·∫°i ho·∫∑c b·ªã m·∫•t sim ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω d·ªãch v·ª•. MB CAPITAL kh√¥ng ch·ªãu b·∫•t k·ª≥ tr√°ch nhi·ªám n√†o v·ªÅ nh·ªØng thi·ªát h·∫°i do h·∫≠u qu·∫£ c·ªßa vi·ªác Nh√† ƒë·∫ßu t∆∞ kh√¥ng th√¥ng b√°o v·ªÅ nh·ªØng s·ª± vi·ªác n√≥i tr√™n.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 8.	R·ª¶I RO V√Ä X·ª¨ L√ù R·ª¶I RO&#13;&#10;
                    Nh√† ƒë·∫ßu t∆∞ nh·∫≠n th·ª©c ƒë∆∞·ª£c c√°c r·ªßi ro trong vi·ªác s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn v√† ƒë·ªìng √Ω t·ª± ch·ªãu tr√°ch nhi·ªám v·ªÅ c√°c r·ªßi ro n·∫øu c√≥ ph√°t sinh trong c√°c tr∆∞·ªùng h·ª£p sau:&#13;&#10;
                  8.1.	C√°c tr∆∞·ªùng h·ª£p b·∫•t kh·∫£ kh√°ng theo quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t, bao g·ªìm nh∆∞ng kh√¥ng gi·ªõi h·∫°n b·ªüi: l≈© l·ª•t, h·ªèa ho·∫°n, b√£i c√¥ng, ƒë√¨nh c√¥ng, thi√™n tai, ƒë·ªãch h·ªça, chi·∫øn tranh, thay ƒë·ªïi quy ƒë·ªãnh ph√°p lu·∫≠t, quy·∫øt ƒë·ªãnh c·ªßa c∆° quan Nh√† n∆∞·ªõc c√≥ th·∫©m quy·ªÅn‚Ä¶&#13;&#10;
                  8.2.	C√°c s·ª± c·ªë/s·ª± ki·ªán ph√°t sinh n·∫±m ngo√†i ph·∫°m vi ki·ªÉm so√°t, ph√≤ng ng·ª´a v√† d·ª± ki·∫øn c·ªßa MB CAPITAL d·∫´n ƒë·∫øn vi·ªác kh√¥ng th·ªÉ nh·∫≠n, x·ª≠ l√Ω ho·∫∑c th·ª±c hi·ªán c√°c giao d·ªãch tr·ª±c tuy·∫øn c·ªßa Nh√† ƒë·∫ßu t∆∞ nh∆∞: &#13;&#10;
                  8.2.1.	H·ªá th·ªëng x·ª≠ l√Ω, h·ªá th·ªëng truy·ªÅn tin g·∫∑p s·ª± c·ªë, b·ªã th√¢m nh·∫≠p tr√°i ph√©p, ho·∫∑c v√¨ b·∫•t k·ª≥ l√≠ do n√†o kh√°c n·∫±m ngo√†i ph·∫°m vi ki·ªÉm so√°t c·ªßa MB CAPITAL.&#13;&#10;
                  8.2.2.	H·ªá th·ªëng th√¥ng tin, m√°y t√≠nh c·ªßa MB CAPITAL g·∫∑p s·ª± c·ªë do b·ªã t·∫•n c√¥ng, nhi·ªÖm virus ho·∫∑c b·ªã ·∫£nh h∆∞·ªüng c·ªßa nh·ªØng s·ª± c·ªë ngo√†i √Ω mu·ªën kh√°c.&#13;&#10;
                  8.3.	C√°c s·ª± c·ªë/s·ª± ki·ªán ph√°t sinh do l·ªói t·ª´ ph√≠a Nh√† ƒë·∫ßu t∆∞:&#13;&#10;
                  8.3.1.	H·ªá th·ªëng m√°y t√≠nh c·ªßa Nh√† ƒë·∫ßu t∆∞ b·ªã h·ªèng, b·ªã virus, b·ªã t·∫•n c√¥ng d·∫´n ƒë·∫øn vi·ªác l√†m l·ªô ho·∫∑c b·ªã ƒë√°nh c·∫Øp c√°c th√¥ng tin Nh√† ƒë·∫ßu t∆∞ (Th√¥ng tin t√†i kho·∫£n truy c·∫≠p, m·∫≠t kh·∫©u, th√¥ng tin kh√°c ‚Ä¶) ho·∫∑c t√†i kho·∫£n truy c·∫≠p D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn c·ªßa Nh√† ƒë·∫ßu t∆∞ b·ªã s·ª≠ d·ª•ng m·ªôt c√°ch tr√°i ph√©p b·ªüi m·ªôt b√™n th·ª© ba.&#13;&#10;
                  8.3.2.	S·ªë ƒëi·ªán tho·∫°i/sim ƒëi·ªán tho·∫°i/m√°y ƒëi·ªán tho·∫°i c·ªßa Nh√† ƒë·∫ßu t∆∞ b·ªã s·ª≠ d·ª•ng m·ªôt c√°ch tr√°i ph√©p b·ªüi b√™n th·ª© ba; M·∫≠t kh·∫©u giao d·ªãch/M√£ giao d·ªãch/Th√¥ng tin c·ªßa Nh√† ƒë·∫ßu t∆∞ b·ªã b√™n th·ª© ba s·ª≠ d·ª•ng d·∫´n ƒë·∫øn thi·ªát h·∫°i cho Nh√† ƒë·∫ßu t∆∞.&#13;&#10;
                  8.4.	C√°c s·ª± c·ªë ph√°t sinh t·ª´ b√™n th·ª© ba cung ·ª©ng d·ªãch v·ª• h·∫° t·∫ßng (ƒëi·ªán, ƒë∆∞·ªùng truy·ªÅn Internet, trung gian thanh to√°n, c√°c d·ªãch v·ª• kh√°c):&#13;&#10;
                  8.4.1.	C√°c s·ª± c·ªë do m·∫•t ngu·ªìn ƒëi·ªán, s·ª± c·ªë do truy·ªÅn th√¥ng.&#13;&#10;
                  8.4.2.	Nh·ªØng s·ª± c·ªë li√™n quan ƒë·∫øn ƒë∆∞·ªùng truy·ªÅn Internet do nh√† cung c·∫•p d·ªãch v·ª• g√¢y ra nh∆∞: ƒë·ª©t ƒë∆∞·ªùng truy·ªÅn, dung l∆∞·ª£ng ƒë∆∞·ªùng truy·ªÅn b·ªã h·∫°n ch·∫ø ho·∫∑c nh·ªØng s·ª± c·ªë t∆∞∆°ng t·ª± c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác th·ª±c hi·ªán c√°c giao d·ªãch tr·ª±c tuy·∫øn c·ªßa Nh√† ƒë·∫ßu t∆∞.&#13;&#10;
                  8.4.3.	H·ªá th·ªëng c·ªßa b√™n th·ª© ba c√≥ li√™n quan ƒë·∫øn vi·ªác x·ª≠ l√Ω, th·ª±c hi·ªán c√°c l·ªánh/ch·ªâ th·ªã thanh to√°n c·ªßa Nh√† ƒë·∫ßu t∆∞ b·ªã x·∫£y ra s·ª± c·ªë.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 9.	CUNG C·∫§P D·ªäCH V·ª§ GIAO D·ªäCH TR·ª∞C TUY·∫æN &#13;&#10;
                  9.1.	MB CAPITAL c√≥ quy·ªÅn kh√≥a/ch·∫•m d·ª©t/t·∫°m d·ª´ng cung c·∫•p c√°c D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn trong tr∆∞·ªùng h·ª£p sau: &#13;&#10;
                  9.1.1.	Nh√† ƒë·∫ßu t∆∞ kh√¥ng tu√¢n th·ªß c√°c ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y, quy ƒë·ªãnh c·ªßa MB CAPITAL v√†/ho·∫∑c c·ªßa ph√°p lu·∫≠t v·ªÅ vi·ªác s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn.&#13;&#10;
                  9.1.2.	Theo quy·∫øt ƒë·ªãnh, y√™u c·∫ßu c·ªßa C∆° quan Nh√† n∆∞·ªõc c√≥ th·∫©m quy·ªÅn ho·∫∑c quy ƒë·ªãnh ph√°p lu·∫≠t. &#13;&#10;
                  9.1.3.	C√°c tr∆∞·ªùng h·ª£p li√™n quan ƒë·∫øn gi·∫£ m·∫°o, r·ªßi ro ho·∫∑c c√≥ gian l·∫≠n ho·∫∑c khi l·ª£i √≠ch c·ªßa MB CAPITAL/Nh√† ƒë·∫ßu t∆∞/b√™n th·ª© ba c√≥ th·ªÉ b·ªã vi ph·∫°m.&#13;&#10;
                  9.1.4.	Giao d·ªãch c√≥ li√™n quan ƒë·∫øn y·∫øu t·ªë t·ªôi ph·∫°m, r·ª≠a ti·ªÅn, vi ph·∫°m ph√°p lu·∫≠t ho·∫∑c ƒë·ªÉ th·ª±c hi·ªán quy ƒë·ªãnh v·ªÅ ph√≤ng ch·ªëng r·ª≠a ti·ªÅn theo quy ƒë·ªãnh c·ªßa MB CAPITAL v√† ph√°p lu·∫≠t.&#13;&#10;
                  9.1.5.	Khi c√≥ c√°c s·ª± c·ªë do nguy√™n nh√¢n b·∫•t kh·∫£ kh√°ng, v∆∞·ª£t qu√° ph·∫°m vi ki·ªÉm so√°t c·ªßa MB CAPITAL.&#13;&#10;
                  9.1.6.	MB CAPITAL t·∫°m d·ª´ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ƒë·ªÉ b·∫£o tr√¨, b·∫£o d∆∞·ª°ng h·ªá th·ªëng v√† th√¥ng b√°o cho Nh√† ƒë·∫ßu t∆∞.&#13;&#10;
                  9.2.	Nh√† ƒë·∫ßu t∆∞ c√≥ quy·ªÅn y√™u c·∫ßu kh√≥a/ch·∫•m d·ª©t s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn b·∫±ng c√°ch g·ª≠i vƒÉn b·∫£n th√¥ng b√°o cho MB CAPITAL theo quy ƒë·ªãnh t·∫°i ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y ho·∫∑c h√¨nh th·ª©c kh√°c theo quy ƒë·ªãnh c·ªßa MB CAPITAL t·ª´ng th·ªùi k·ª≥.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 10.	CUNG C·∫§P, TRAO ƒê·ªîI TH√îNG TIN&#13;&#10;
                  10.1.	Nh√† ƒë·∫ßu t∆∞ c√≥ tr√°ch nhi·ªám cung c·∫•p ch√≠nh x√°c cho MB CAPITAL c√°c th√¥ng tin li√™n quan ƒë·∫øn ƒë·ªãa ch·ªâ, th√¥ng tin li√™n l·∫°c, s·ªë gi·∫•y t·ªù t√πy th√¢n, m·∫´u ch·ªØ k√Ω ‚Ä¶ Trong tr∆∞·ªùng h·ª£p thay ƒë·ªïi c√°c th√¥ng tin n√†y (bao g·ªìm c·∫£ tr∆∞·ªùng h·ª£p Nh√† ƒë·∫ßu t∆∞ s·ª≠ d·ª•ng c√°c d·ªãch v·ª• kh√°c t·∫°i MB CAPITAL) Nh√† ƒë·∫ßu t∆∞ c√≥ tr√°ch nhi·ªám th√¥ng b√°o cho MB CAPITAL. MB CAPITAL kh√¥ng ch·ªãu b·∫•t k·ª≥ tr√°ch nhi·ªám n√†o v·ªÅ nh·ªØng thi·ªát h·∫°i do h·∫≠u qu·∫£ c·ªßa vi·ªác Nh√† ƒë·∫ßu t∆∞ kh√¥ng cung c·∫•p th√¥ng tin ch√≠nh x√°c v√†/ho·∫∑c kh√¥ng th√¥ng b√°o cho MB CAPITAL v·ªÅ s·ª± thay ƒë·ªïi c√°c th√¥ng tin n√≥i tr√™n.&#13;&#10;
                  10.2.	Trong tr∆∞·ªùng h·ª£p Nh√† ƒë·∫ßu t∆∞ thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒëƒÉng k√Ω D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn nh∆∞ng kh√¥ng th√¥ng b√°o b·∫±ng vƒÉn b·∫£n cho MB CAPITAL v√† MB CAPITAL ch·ª©ng minh ƒë∆∞·ª£c ƒë√£ g·ª≠i tin nh·∫Øn th√¥ng b√°o ph√°t sinh giao d·ªãch/th·ª±c hi·ªán giao d·ªãch cho s·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒëƒÉng k√Ω, Nh√† ƒë·∫ßu t∆∞ ho√†n to√†n ch·ªãu tr√°ch nhi·ªám thanh to√°n c√°c kho·∫£n ph√°t sinh c·ªßa nh·ªØng giao d·ªãch n√†y.&#13;&#10;
                  10.3.	B·∫•t k·ª≥ y√™u c·∫ßu n√†o c·ªßa Nh√† ƒë·∫ßu t∆∞ cho MB CAPITAL li√™n quan ƒë·∫øn D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn ph·∫£i ƒë∆∞·ª£c th·ª±c hi·ªán b·∫±ng vƒÉn b·∫£n ho·∫∑c ph∆∞∆°ng th·ª©c kh√°c do hai b√™n th·ªèa thu·∫≠n.&#13;&#10;
                  10.4.	M·ªçi th√¥ng b√°o, trao ƒë·ªïi th√¥ng tin c·ªßa MB CAPITAL g·ª≠i cho Nh√† ƒë·∫ßu t∆∞ theo ƒë·ªãa ch·ªâ ƒë√£ ƒëƒÉng k√Ω v·ªõi MB CAPITAL b·∫±ng m·ªôt trong c√°c ph∆∞∆°ng th·ª©c: Fax, th∆∞ ƒëi·ªán t·ª≠, tin nh·∫Øn, g·ª≠i qua b∆∞u ƒëi·ªán/chuy·ªÉn ph√°t, g·ª≠i tr·ª±c ti·∫øp, th√¥ng b√°o t·∫°i tr·ª• s·ªü c·ªßa MB CAPITAL ho·∫∑c th√¥ng b√°o t·∫°i Website MB CAPITAL.&#13;&#10;
                  10.5.	T√†i li·ªáu, th√¥ng b√°o, trao ƒë·ªïi th√¥ng tin do MB CAPITAL l·∫≠p v√† g·ª≠i t·ªõi Nh√† ƒë·∫ßu t∆∞ ƒë∆∞·ª£c coi l√† ƒë√£ nh·∫≠n ƒë∆∞·ª£c khi:&#13;&#10;
                  10.5.1.	V√†o th·ªùi ƒëi·ªÉm nh·∫≠n n·∫øu chuy·ªÉn tr·ª±c ti·∫øp v√† c√≥ gi·∫•y bi√™n nh·∫≠n.&#13;&#10;
                  10.5.2.	V√†o ng√†y l√†m vi·ªác li·ªÅn ngay sau ng√†y vƒÉn b·∫£n ƒë∆∞·ª£c g·ª≠i b·∫±ng b∆∞u ƒëi·ªán/chuy·ªÉn ph√°t t·ªõi ƒë·ªãa ch·ªâ Nh√† ƒë·∫ßu t∆∞ ƒë√£ ƒëƒÉng k√Ω.&#13;&#10;
                  10.5.3.	Sau khi vƒÉn b·∫£n ƒë∆∞·ª£c g·ª≠i b·∫±ng Fax t·ªõi s·ªë Fax ƒë∆∞·ª£c quy ƒë·ªãnh t·∫°i H·ª£p ƒë·ªìng n√†y v√† m√°y Fax ƒë√£ th√¥ng b√°o g·ª≠i th√†nh c√¥ng, kh√¥ng c√≥ l·ªói.&#13;&#10;
                  10.5.4.	Sau khi th∆∞ ƒëi·ªán t·ª≠ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng (h·ªá th·ªëng th∆∞ ƒëi·ªán t·ª≠ kh√¥ng nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o l·ªói v·ªÅ vi·ªác g·ª≠i, nh·∫≠n th∆∞).&#13;&#10;
                  10.5.5.	V√†o th·ªùi ƒëi·ªÉm ho√†n t·∫•t vi·ªác ni√™m y·∫øt th√¥ng tin t·∫°i tr·ª• s·ªü c·ªßa MB CAPITAL ho·∫∑c th·ªùi ƒëi·ªÉm MB CAPITAL ho√†n t·∫•t vi·ªác ƒëƒÉng t·∫£i th√¥ng tin tr√™n website c·ªßa MB CAPITAL.&#13;&#10;
                  10.5.6.	Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng b·ªüi nh√† cung c·∫•p d·ªãch v·ª• vi·ªÖn th√¥ng.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 11.	CH·∫§M D·ª®T S·ª¨ D·ª§NG D·ªäCH V·ª§&#13;&#10;
                  11.1.	C√°c tr∆∞·ªùng h·ª£p ch·∫•m d·ª©t D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn :&#13;&#10;
                  11.1.1.	C√°c b√™n th·ªèa thu·∫≠n ch·∫•m d·ª©t D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn .&#13;&#10;
                  11.1.2.	Nh√† ƒë·∫ßu t∆∞ y√™u c·∫ßu ch·∫•m d·ª©t s·ª≠ d·ª•ng D·ªãch v·ª• b·∫±ng vƒÉn b·∫£n th√¥ng b√°o g·ª≠i t·ªõi MB CAPITAL tr∆∞·ªõc 05 ng√†y l√†m vi·ªác v√† ho√†n th√†nh c√°c nghƒ©a v·ª• v·ªõi MB CAPITAL.&#13;&#10;
                  11.1.3.	MB CAPITAL ch·∫•m d·ª©t cung c·∫•p d·ªãch v·ª• trong c√°c tr∆∞·ªùng h·ª£p:&#13;&#10;
                  11.1.3.1.	Nh√† ƒë·∫ßu t∆∞ b·ªã ch·∫øt, m·∫•t t√≠ch, m·∫•t/h·∫°n ch·∫ø nƒÉng l·ª±c h√†nh vi d√¢n s·ª± ho·∫∑c kh√¥ng thu·ªôc ƒë·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn theo quy ƒë·ªãnh t·∫°i ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y, quy ƒë·ªãnh ph√°p lu·∫≠t.&#13;&#10;
                  11.1.3.2.	Vi·ªác cung c·∫•p d·ªãch v·ª•, theo ƒë√°nh gi√° c·ªßa MB CAPITAL ho·∫∑c theo quy·∫øt ƒë·ªãnh c·ªßa C∆° quan Nh√† n∆∞·ªõc c√≥ th·∫©m quy·ªÅn, d·∫´n ƒë·∫øn vi·ªác MB CAPITAL vi ph·∫°m c√°c quy ƒë·ªãnh ph√°p lu·∫≠t ho·∫∑c MB CAPITAL kh√¥ng c√≤n kh·∫£ nƒÉng cung c·∫•p c√°c d·ªãch v·ª• n√†y.&#13;&#10;
                  11.1.3.3.	C√°c tr∆∞·ªùng h·ª£p MB CAPITAL ch·∫•m d·ª©t cung c·∫•p d·ªãch v·ª• theo quy ƒë·ªãnh t·∫°i Kho·∫£n 9.1 ƒêi·ªÅu 9 ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y.&#13;&#10;
                  11.1.3.4.	MB CAPITAL ch·∫•m d·ª©t cung c·∫•p d·ªãch v·ª• v√† g·ª≠i th√¥ng b√°o t·ªõi Nh√† ƒë·∫ßu t∆∞ tr∆∞·ªõc 05 ng√†y l√†m vi·ªác.&#13;&#10;
                  11.1.4.	C√°c tr∆∞·ªùng h·ª£p ch·∫•m d·ª©t kh√°c theo quy ƒë·ªãnh ph√°p lu·∫≠t.&#13;&#10;
                  11.2.	Nghƒ©a v·ª• c·ªßa c√°c b√™n khi ch·∫•m d·ª©t D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn :&#13;&#10;
                  11.2.1.	Ho√†n t·∫•t c√°c nghƒ©a v·ª• thanh to√°n (n·∫øu c√≥) gi·ªØa hai b√™n li√™n quan ƒë·∫øn vi·ªác s·ª≠ d·ª•ng d·ªãch v·ª•.&#13;&#10;
                  11.2.2.	Gi·∫£i quy·∫øt c√°c tra so√°t, khi·∫øu n·∫°i c√≥ li√™n quan ƒë·∫øn vi·ªác th·ª±c hi·ªán d·ªãch v·ª• c·ªßa hai b√™n.&#13;&#10;
                  &#13;&#10;
                  ƒêI·ªÄU 12.	ƒêI·ªÄU KHO·∫¢N THI H√ÄNH&#13;&#10;
                  12.1.	Lu·∫≠t √°p d·ª•ng v√† gi·∫£i quy·∫øt tranh ch·∫•p&#13;&#10;
                  12.1.1.	ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh b·ªüi ph√°p lu·∫≠t Vi·ªát Nam.&#13;&#10;
                  12.1.2.	Trong qu√° tr√¨nh th·ª±c hi·ªán n·∫øu ph√°t sinh tranh ch·∫•p, hai b√™n s·∫Ω ch·ªß ƒë·ªông gi·∫£i quy·∫øt tr√™n c∆° s·ªü th∆∞∆°ng l∆∞·ª£ng, h√≤a gi·∫£i. Tr∆∞·ªùng h·ª£p kh√¥ng gi·∫£i quy·∫øt ƒë∆∞·ª£c, tranh ch·∫•p s·∫Ω ƒë∆∞·ª£c ƒë∆∞a ra T√≤a √°n n∆°i MB CAPITAL c√≥ tr·ª• s·ªü ƒë·ªÉ gi·∫£i quy·∫øt, tr·ª´ tr∆∞·ªùng h·ª£p ph√°p lu·∫≠t c√≥ quy ƒë·ªãnh kh√°c.&#13;&#10;
                  12.2.	S·ª≠a ƒë·ªïi, b·ªï sung ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn &#13;&#10;
                  12.2.1.	Vi·ªác s·ª≠a ƒë·ªïi, b·ªï sung ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y ƒë∆∞·ª£c MB CAPITAL th√¥ng b√°o cho Nh√† ƒë·∫ßu t∆∞ th√¥ng qua m·ªôt trong c√°c h√¨nh th·ª©c: C√¥ng b·ªë tr√™n Website MB CAPITAL, th√¥ng b√°o ni√™m y·∫øt t·∫°i tr·ª• s·ªü c·ªßa MB CAPITAL, email ho·∫∑c SMS theo ƒë·ªãa ch·ªâ ƒëƒÉng k√Ω c·ªßa Nh√† ƒë·∫ßu t∆∞. &#13;&#10;
                  12.2.2.	Tr∆∞·ªùng h·ª£p Nh√† ƒë·∫ßu t∆∞ kh√¥ng ƒë·ªìng √Ω v·ªõi c√°c n·ªôi dung s·ª≠a ƒë·ªïi, b·ªï sung ƒë√≥, Nh√† ƒë·∫ßu t∆∞ c√≥ th·ªÉ ng·ª´ng s·ª≠ d·ª•ng d·ªãch v·ª• b·∫±ng vi·ªác g·ª≠i y√™u c·∫ßu ch·∫•m d·ª©t s·ª≠ d·ª•ng d·ªãch v·ª• b·∫±ng vƒÉn b·∫£n cho MB CAPITAL. &#13;&#10;
                  12.2.3.	Vi·ªác Nh√† ƒë·∫ßu t∆∞ ti·∫øp t·ª•c s·ª≠ d·ª•ng d·ªãch v·ª• sau th·ªùi h·∫°n th√¥ng b√°o v√† vi·ªác s·ª≠a ƒë·ªïi, b·ªï sung ƒêi·ªÉu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y c√≥ hi·ªáu l·ª±c ƒë∆∞·ª£c coi l√† Nh√† ƒë·∫ßu t∆∞ ƒë√£ ch·∫•p nh·∫≠n c√°c n·ªôi dung s·ª≠a ƒë·ªïi, b·ªï sung ƒë√≥.&#13;&#10;
                  12.3.	C√°c ƒëi·ªÅu kho·∫£n kh√°c&#13;&#10;
                  12.3.1.	C√°c ph·ª• l·ª•c v√†/ho·∫∑c c√°c vƒÉn b·∫£n, th√¥ng b√°o s·ª≠a ƒë·ªïi, b·ªï sung, thay th·∫ø, c√°c th·ªèa thu·∫≠n kh√°c gi·ªØa c√°c b√™n (n·∫øu c√≥) l√† m·ªôt ph·∫ßn kh√¥ng t√°ch r·ªùi c·ªßa ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y.&#13;&#10;
                  12.3.2.	C√°c v·∫•n ƒë·ªÅ ch∆∞a ƒë∆∞·ª£c quy ƒë·ªãnh t·∫°i ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán theo quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t, h∆∞·ªõng d·∫´n c·ªßa c∆° quan Nh√† n∆∞·ªõc c√≥ th·∫©m quy·ªÅn v√†/ho·∫∑c c√°c cam k·∫øt/th·ªèa thu·∫≠n c√≥ hi·ªáu l·ª±c kh√°c gi·ªØa c√°c b√™n.&#13;&#10;
                  12.3.3.	Nh√† ƒë·∫ßu t∆∞ ƒë√£ ƒë·ªçc, hi·ªÉu, nh·∫•t tr√≠ v√† cam k·∫øt th·ª±c hi·ªán ƒë√∫ng c√°c quy ƒë·ªãnh t·∫°i ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y.&#13;&#10;
                  12.3.4.	 ƒêi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán n√†y c√≥ hi·ªáu l·ª±c k·ªÉ t·ª´ ng√†y Nh√† ƒë·∫ßu t∆∞ th·ª±c hi·ªán ƒëƒÉng k√Ω s·ª≠ d·ª•ng D·ªãch V·ª• Giao D·ªãch Tr·ª±c Tuy·∫øn c·ªßa MB CAPITAL n·∫øu c√°c b√™n kh√¥ng c√≥ th·ªèa thu·∫≠n kh√°c./.&#13;&#10;
                  &#13;&#10;            
                  
"
                  className="form-control"
                  style={{ height: "300px", width: "100%", resize: "none" }}
                />
              )}
              {this.props.language == "en" && (
                <textarea
                  readOnly="readOnly"
                  rows={5}
                  value="The Investor hereby requests and MB Capital Management Joint Stock Company(‚ÄúMB CAPITAL‚Äù) agrees to provide the Online Trading Service with the following terms and conditions:&#13;&#10;
                  I. THE INVESTOR'S COMMITMENTS WHEN OPEN TRADDING ACCOUNT &#13;&#10;
                  1. I thoroughly scrutinized the Prospectus and the Fund Charter of Fund/Funds of which I register account managed by MB Capital, as all risks associated to investment in the Fund.&#13;&#10;
                  2. I understand that fund certificate is an investment product, and there may be potential risks when I invest in the Fund. The net asset value per fund unit may increase or decrease, and both the expected profit and the past results of the Fund do not guarantee the future results. I am fully responsible for my decision on investing in fund certificates&#13;&#10;
                  3. I  guarantee that all information provided here and attached documents are correct, and I shall notify MB Capital any change and update (if any).&#13;&#10;
                  4. I  understand that MB Capital preserves the right to alter these order forms without any prior notification.&#13;&#10;
                  &#13;&#10;
                  II. TERMS AND CONDITIONS OF ONLINE TRADING SERVICES&#13;&#10;
                  ARTICLE 1. DEFINITIONS &#13;&#10;
                  To the extent of this agreement, the terms below have the following meaning:&#13;&#10;
                  1.1. MB Capital: refers to MB Capital Management Joint Stock Company.&#13;&#10;
                  1.2. Investor: refers to the individual, institutional investor who registers for Online Trading Service and approved by MB Capital.&#13;&#10;
                  1.3. Online Trading Service (‚ÄúService‚Äù): refers to the service provided by MB Capital via Internet, allowing the investor to send orders/ instructions including but not limited to account balance inquiry, trading history inquiry, fund certificates subscription/ redemption, other transactions, facilities via MB Capital website.&#13;&#10;
                  1.4. OTP: refers to the one-time-password, generated from the authentication method following MB Capital regulation for authentication of transaction orders/instructions via Online Trading Service.&#13;&#10;
                  1.5. MB Capital website: is https://mbcapital.com.vn, https://online.mbcapital.com.vn, or other websites stipulated by MB Capital.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 2. SCOPE OF THE AGREEMENT &#13;&#10;
                  2.1. Method of using Online Trading Service&#13;&#10;
                  2.1.1. The Investor logs in Online Trading Service to register, use products, services and other facilities provided by MB Capital from time to time through the method of creating, sending to MB Capital transaction orders/ instructions, information inquiry‚Ä¶ &#13;&#10;
                  2.1.2. The Investor must comply and follow the instructions on how to use Online Trading Service issued by MB Capital and posted on MB Capital website or instructions on the user interface of the website. In case there is a change in the instruction, MB Capital will publish it on MB Capital Website.&#13;&#10;
                  2.1.3. The use of products, services, and facilities available through Online Trading Service must comply with MB Capital's regulations, guidelines, and conditions for such products, services, and facilities.&#13;&#10;
                  2.2. Principles when using Online Trading Service&#13;&#10;
                  2.2.1. The Investor acknowledges that if any logging actions in MB Capital website use the Investor‚Äôs user name, password and/or other authentication methods by MB Capital to create and send transaction orders/ instructions, such orders/ instructions are deemed to be performed by the Investor. The Investor shall take full responsibilities for these transaction orders/ instructions.&#13;&#10;
                  2.2.2. The transactions which have been successfully processed, executed according to the orders/instructions created by the Investor and sent to MB Capital through Online Transaction Service are valuable and irrevocable. The Investor is responsible for transactions that have been processed or executed.&#13;&#10;
                  2.2.3. Data, information recorded on MB Capital's system in any form including receiving and processing trading orders/instructions of the Investor as well as the content of these orders/instructions is legal evidence of the Investor using Online Trading Service, and he is responsible for these transaction orders/instructions.&#13;&#10;
                  2.3. Term of the service&#13;&#10;
                  The Investor can start using Online Trading Service after completing the registration procedures and MB Capital successfully activates the account until the service is terminated in one of the cases prescribed in Article 10.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 3. SERVICE CHARGES AND PAYMENT MENTHOD&#13;&#10;
                  3.1. Service charges&#13;&#10;
                  Service charges are fees that the Investor using Online Trading Service shall pay. The fee schedule for Online Trading Service regulated by MB Capital will be updated by the time in compliance with the law and take effect for the Investor.&#13;&#10;
                  3.2. Payment method&#13;&#10;
                  MB Capital automatically deducts from the Investor‚Äôs redemption amount for services which have a periodical fee or for arising transactions based on the fee schedule in effect at that time. &#13;&#10;
                  &#13;&#10;
                  ARTICLE 4. CREATING, SENDING, RECEIVING, EXECUTING TRANSACTION ORDERS/ INSTRUCTIONS &#13;&#10;
                  4.1. Creating, sending transaction orders/ instructions&#13;&#10;
                  4.1.1. Transaction orders/instructions created via Online Trading Service are legal and valid if the following conditions are fulfilled:&#13;&#10;
                  4.1.1.1. The Investor strictly follows instructions issued by MB Capital.&#13;&#10;
                  4.1.1.2. Transaction orders/instructions are created, sent from the Investor‚Äôs authorized account which was registered with MB Capital and/or provided by MB Capital.&#13;&#10;
                  4.1.1.3. Transaction orders/instructions must be completed in compliance with MB Capital regulations.&#13;&#10;
                  4.1.1.4. Authenticated/ identified by the method specified by MB Capital for such Online Transaction Service;&#13;&#10;
                  4.1.1.5. Other conditions specified by MB Capital (if any).&#13;&#10;
                  MB Capital has the right to refuse to execute any illegal or invalid orders/ instructions.&#13;&#10;
                  4.1.2. The Investor can create and send transaction orders/ instruction via Online Trading Service at any time.&#13;&#10;
                  4.1.3. The Investor‚Äôs orders/instructions through Online Trading Service are deemed to be sent when the orders/instructions are successfully entered into MB Capital system and out of the Investor‚Äôs control.&#13;&#10;
                  4.2. Receiving transaction orders/ instructions&#13;&#10;
                  MB Capital is deemed to receive the Investor‚Äôs orders/instruction through Online Trading Service when the orders/instructions were recorded in MB Capital's electronic transaction management system correctly and accessibly.&#13;&#10;
                  4.3. Canceling transaction orders/ instructions&#13;&#10;
                  In case the Investor wants to cancel transaction orders/instructions sent to MB Capital through Online Trading Service, MB Capital has the right to consider (but not required) to cancel the Investor‚Äôs orders/ instructions if such orders/instructions have not been processed/executed and the cancellation does not conflict with the interest of MB Capital as well as any other third parties.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 5. RIGHTS AND RESPONSIBILITIES OF THE INVESTOR&#13;&#10;
                  5.1. Rights of the Investor&#13;&#10;
                  5.1.1. Use the products, services, facilities of MB Capital via Online Trading Service within the scope of this agreement.&#13;&#10;
                  5.1.2. Change registered information, require to reissue password, change the Investor identification method.&#13;&#10;
                  5.1.3. Terminate Online Trading Service by sending a written notice to MB Capital, even when the Investor does not agree with the amendment and supplement to this Agreement by MB Capital.&#13;&#10;
                  5.1.4. Activate and use other added online trading services through any registration and activation methods provided by MB Capital at the time.&#13;&#10;
                  5.1.5. Send supporting requirement, inquiry, claim to MB Capital through the following method: hand delivery, phone call MB Capital Customer Support at 02437262808 (Ext: 17|32), or other methods specified by MB Capital.&#13;&#10;
                  5.2. Responsibilities of the Investor&#13;&#10;
                  5.2.1. Provide full and accurate information required at the registration and/or any time when required by MB Capital.&#13;&#10;
                  5.2.2. Comply with MB Capital's regulations regarding registration and usage of Online Trading Services.&#13;&#10;
                  5.2.3. Update and follow information, announcements, regulations and instructions on using Online Trading Services in the following ways: (i) announcement on MB Capital Website; (ii) instruction materials at MB Capital office; (iii) notification, instructions of MB Capital via email, SMS; (iv) other methods prescribed by MB Capital from time to time.&#13;&#10;
                  5.2.4. Agree to use the information, signature samples registered under this Agreement for other online services provided by MB Capital from time to time.&#13;&#10;
                  5.2.5. Manage and secure the username and password of the Online Trading Service and the authentication device, ensure that the orders/instructions are sent by the Investor or his attorney.&#13;&#10;
                  5.2.6. Take responsibility for trading orders/instructions sent with the valid username, password, and/or authentication method of the Investor through Online Trading Service.&#13;&#10;
                  5.2.7. Accept that the data exported from MB Capital's system or a third party regarding the Investor‚Äôs transaction will be used as a basis for dispute resolving between the Investor and related parties.&#13;&#10;
                  5.2.8. Verify the validity and responsibility of the beneficiary's information before confirming the orders/instructions.&#13;&#10;
                  5.2.9. Take responsibility for damages occurring/arising due to: (i) exploited Investor‚Äôs username, password, authentication device under any circumstance; (ii) failure to cancel the processed orders/instructions via the Investor Online Trading Service; (iii) disputes (if any) between the Investor and the beneficiary regarding the orders/instructions.&#13;&#10;
                  5.2.10. Notify and return to MB Capital: (i) The amount of money transferred by MB Capital to the Investor's account due to operational errors, system problems; (ii) The amount of money transferred by MB Capital to the Investor‚Äôs account through erroneous transactions, technical failures and the Investor can not prove to the ownership.&#13;&#10;
                  5.2.11. Verify sufficient balance on the Online Trading Service account when selling the fund certificates and paying fees according to MB Capital's regulations.&#13;&#10;
                  5.2.12. Promptly notify MB Capital if there are any errors when using the Online Transaction Service or invalid payments.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 6. RIGHTS AND RESPONSIBILITIES OF MB CAPITAL &#13;&#10;
                  6.1. Rights of MB Capital&#13;&#10;
                  6.1.1. Refuse to process or execute the invalid/illegal trading order, directive, payment according to the provisions of MB Capital and the law.&#13;&#10;
                  6.1.2. Request the Investor to provide necessary documents for MB Capital to sufficiently execute the order placed on Online Trading Service.&#13;&#10;
                  6.1.3. Lock access to MB Capital Online if the Investor fails to log in over allowed times according to the provisions of MB Capital under each period.&#13;&#10;
                  6.1.4. Provide information relating to the Investor, account, transaction history to third parties in the following case: (i) Under the consent of the Investor; (ii) At the request of the competent State agency, as prescribed by law; (iii) The third parties is a partner of MB Capital in providing online trading services or to assist in the investigation, settlement of complaints and disputes (if any) between MB Capital and the Investor relating to the implementation of this agreement.&#13;&#10;
                  6.2. Responsibilities of MB Capital&#13;&#10;
                  6.2.1. Execute trading order, directive submitted through Online Trading Service as specified in this agreement.&#13;&#10;
                  6.2.2. Handle and respond to complaints and requests of the Investor.&#13;&#10;
                  6.2.3. Keep in confidence the information relating to the Investor, account, transaction history in accordance with the law.&#13;&#10;
                  6.2.4. Comply with the provisions of this agreement and the law.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 7. SERVICE SECURITY&#13;&#10;
                  To ensure security when using Online Trading Service, the Investor must:&#13;&#10;
                  7.1. Keep in confidence the username, password, and telephone/mobile device used to receive OTP, other security devices provided by MB Capital to authenticate orders and cautiously prevent the unauthorized use of password and OTP device.&#13;&#10;
                  7.2. Notify MB Capital to lock access to Online Trading Service after detecting or suspecting exposed password, unauthorized access or stolen/lost OTP devices, and follow the instructions of MB Capital to reset/replace the OTP device (if any).&#13;&#10;
                  7.3. Notify MB Capital to lock access to Online Trading Service when the mobile number of the Investor is two-way locked, sold, or lost. MB Capital is not liable for any damages caused by the Investor not notifying any of the events mentioned above.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 8. RISK AND RISK HANDLING &#13;&#10;
                  The Investor is aware of the risks when using Online Trading Service and agrees to be solely responsible for risks (if any) arising in the following cases:&#13;&#10;
                  8.1. Force majeure cases according to the law, including but not limited to: flood, fire, strike, strike, disaster, enemy, change of law, the decision of the competent state agency‚Ä¶&#13;&#10;
                  8.2. Events which arise out of the control, prevention, and expectation of MB Capital lead to the refusal of processing or executing of online transactions of the Investor such as: &#13;&#10;
                  8.2.1. The processing system, the communication system either crashes, is illegally bypassed, or due to any reasons beyond the control of MB Capital.&#13;&#10;
                  8.2.2. The computer system of MB Capital crashes due to an attack, virus infection, or other unexpected problems.&#13;&#10;
                  8.3. Events arise due to the Investor's fault:&#13;&#10;
                  8.3.1. Investor‚Äôs personal computer is exploited lead to exposure of Investor information (account information, password, other information) or access to Online Trading Service is illegally used by a third party.&#13;&#10;
                  8.3.2. Phone number/SIM card/Mobile phone of the Investor is illegally used by the third-party; The transaction OTP/information of the Investor is used by the third-party, which causes damage to the Investor.&#13;&#10;
                  8.4. Issues arising from third-party service providers (electricity, Internet, payment services or other services):&#13;&#10;
                  8.4.1. Issues caused by a power cut, media problems.&#13;&#10;
                  8.4.2. Internet line-related issues caused by service providers such as faulty transmission lines, limited transmission capacity, or similar incidents that may interfere with the Investor' online transactions.&#13;&#10;
                  8.4.3. The interbank payment system or the third-party system, which is related to the processing, executing of the Investor‚Äôs order becomes out of order.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 9. INFORMATION PROVIDING&#13;&#10;
                  9.1. MB Capital assumes no responsibility for damages resulting from the failure of the Investor either to provide his information (including but not limited to: address, contact information, ID, Signature form) or to notify MB Capital of the change of any information above.&#13;&#10;
                  9.2. In case the Investor changes the registered phone number for Online Trading Service and does not send a written notice to MB, and MB Capital can prove that the OTP has been sent to the Investor‚Äôs registered phone number, the Investor is solely responsible for any liabilities arising from these transactions.&#13;&#10;
                  9.3. Any request of the Investor relating to Online Trading Service must be made in written form or otherwise agreed by the two parties.&#13;&#10;
                  9.4. All information and notification from MB Capital must be sent to the Investor‚Äôs registered address by one of the following methods: Fax, email, message, post/guaranteed delivery, hand delivery, announcement at MB Capital office or on MB Capital Website.&#13;&#10;
                  9.5. Any documents or notification from MB Capital sent to the Investor shall be deemed received:&#13;&#10;
                  9.5.1. On the date of the receipt in case of hand delivery.&#13;&#10;
                  9.5.2. On the working day immediately after the day the document is sent in case of post/guaranteed delivery.&#13;&#10;
                  9.5.3. After the document has been sent by fax to the number specified in this agreement and the fax machine has shown a successful notification without any error.&#13;&#10;
                  9.5.4. After the email has been sent successfully (the e-mail system does not show any error messages about sending or receiving mail).&#13;&#10;
                  9.5.5. At the time of completing the listing of the announcement at MB Capital's office or at the time of posting the announcement on MB Capital's website.&#13;&#10;
                  9.5.6. At the time that the message is successfully implemented by the phone service provider.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 10. SERVICE TERMINATION &#13;&#10;
                  10.1. Online Trading Service can be terminated in one of the following cases:&#13;&#10;
                  10.1.1. Both parties agree to terminate the service.&#13;&#10;
                  10.1.2. The Investor requests to terminate the service by written notice sent to MB Capital at least 05 days prior and has completed all his obligations towards MB Capital.&#13;&#10;
                  10.1.3. MB Capital stops providing the service in the following cases:&#13;&#10;
                  10.1.3.1. The Investor dies, goes missing, loses the capacity for civil acts, or is no longer the subject to use Online Trading Service according to this Agreement and the law.&#13;&#10;
                  10.1.3.2. Providing the service, as assessed by MB Capital or competent State authority, causes MB Capital to violate the law or to be no longer capable of providing the service.&#13;&#10;
                  10.1.3.3. MB Capital requests to terminate the service by written notice sent to the Investor at least 05 days prior.&#13;&#10;
                  10.1.4. Other termination cases according to the law.&#13;&#10;
                  10.2. Obligations of the parties when terminating Online Trading Service:&#13;&#10;
                  10.2.1. Complete the payment obligations (if any) between the two parties regarding the use of the service.&#13;&#10;
                  10.2.2. Resolving inquiries and complaints of both parties related to the service.&#13;&#10;
                  &#13;&#10;
                  ARTICLE 11. IMPLEMENTATION PROVISION &#13;&#10;
                  11.1. Applicable law and dispute resolution &#13;&#10;
                  11.1.1. This agreement is governed in accordance with the law of the Socialist Republic of Vietnam.&#13;&#10;
                  11.1.2. All disputes arising during the performance hereof shall be settled by mutual negotiation and conciliation between the two parties. Where such negotiation and conciliation fail, the dispute will be brought to the Court where MB Capital has its headquarters for settlement, unless otherwise provided by law.&#13;&#10;
                  11.2. Amendment, supplement to the agreement.&#13;&#10;
                  11.2.1. The amendment and supplement to this Agreement are notified by MB Capital to the Investor through one of the following forms: announcement on MB Capital Website, announcement at MB Capital's office, email or SMS to Investor registered contacts.&#13;&#10;
                  11.2.2. In case the Investor does not agree with such amendment or supplement, the Investor may stop using the service by sending a written request to MB Capital.&#13;&#10;
                  11.2.3. The fact that the Investor continues to use the service after the amendment and supplementation of this agreement has been announced shall be considered as the Investor has accepted such amendment and supplement.&#13;&#10;
                  11.3. Other provisions.&#13;&#10;
                  11.3.1. Appendices and/or documents, amendments, supplements, replacements, other agreements between the parties (if any) are an integral part of this agreement.&#13;&#10;
                  11.3.2. Issues not specified in this agreement shall be implemented in accordance with the law, guidelines of competent State agencies and/or other effective agreements between the parties.&#13;&#10;
                  11.3.3. The Investor have read, understood, agreed, and committed to comply with the provisions of this agreement.&#13;&#10;
                  11.3.4. This agreement takes effect from the signing date unless otherwise agreed by the parties.&#13;&#10;
                
"
                  className="form-control"
                  style={{ height: "300px", width: "100%", resize: "none" }}
                />
              )}
            </div>
          </div>
          {/* <div style={{textAlign: 'left'}} className="col-md-12 row">
            
              <div className="col-md-3">
                <h5 className="highlight">
                  <b>{this.props.strings.commitment}</b>
                </h5>
              </div>
              <div className="col-md-3">
                <h5>
                  <input
                    id="cbIsagree"
                    style={{ margin: 0 }}
                    onChange={this.onChange.bind(this, "ISAGREE")}
                    type="checkbox"
                  />
                </h5>
              </div>
              <div className="col-md-3 ">
              <h5 className="highlight">
                <b>{this.props.strings.useonline}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <h5>
                <input
                  style={{ margin: 0 }}
                  checked={this.state.ISONLINE}
                  id="cbISONL"
                  onChange={this.onChange.bind(this, "ISONLINE")}
                  type="checkbox"
                />
              </h5>
            </div>
          </div> */}
          <div style={{textAlign: 'left'}} className="col-md-12 row">
            <div className="col-md-12 ">
              <b className="cb-fix" style={{float: "left"}}>
                <input
                  style={{ margin: 0 }}
                  checked={this.state.ISONLINE}
                  id="cbISONL"
                  onChange={this.onChange.bind(this, "ISONLINE")}
                  type="checkbox"
                />
                </b>
              <h5>
                <b className="highlight" >{this.props.strings.useonline}</b>
              </h5>
            </div>
            </div>

            <div style={{textAlign: 'left'}} className="col-md-12 row">
            <div className="col-md-12 ">
              <b className="cb-fix" style={{float: "left"}}>
                <input
                  style={{ margin: 0 }}
                  checked={this.state.generalInformation.ISAGREESHARE}
                  id="cbISAGREESHARE"
                  onChange={this.onChange.bind(this, "ISAGREESHARE")}
                  type="checkbox"
                />
                </b>
              <h5>
                <b className="highlight" >{this.props.strings.ISAGREESHARE}</b>
              </h5>
            </div>
            </div>

            <div style={{textAlign: 'left'}} className="col-md-12 row">
            <div className="col-md-12 ">
              <b className="cb-fix" style={{float: "left"}}>
                <input
                  id="cbIsagree"
                  style={{ margin: 0 }}
                  onChange={this.onChange.bind(this, "ISAGREE")}
                  type="checkbox"
                />
                </b>
              <h5>
                <b className="highlight" >{this.props.strings.commitment}</b>
              </h5>
            </div>
            </div>


            {/* <div style={{textAlign: 'left'}} className="col-md-12 row">
              <div className="col-md-12 ">
              <b className="cb-fix" style={{float: "left"}}>
                <input
                  style={{ margin: 0 }}
                  checked={this.state.generalInformation.ISAGREESHARE}
                  id="cbISAGREESHARE"
                  onChange={this.onChange.bind(this, "ISAGREESHARE")}
                  type="checkbox"
                />
              </b>
              <h5 className="h5-display">
                <b className="highlight">{this.props.strings.ISAGREESHARE}</b>
              </h5>
            </div>
            </div>
            <div style={{textAlign: 'left'}} className="col-md-12 row">
              <div className="col-md-12 ">
              <b className="cb-fix" style={{float: "left"}}>
                <input
                  
                  
                  id="cbIsagree"
                    style={{ margin: 0 }}
                    onChange={this.onChange.bind(this, "ISAGREE")}
                    type="checkbox"
                />
              </b>
              <h5 className="h5-display">
                <b className="highlight">{this.props.strings.commitment}</b>
              </h5>
            </div>
            </div> */}
            {/* <div style={{textAlign: 'left'}} className="col-md-12 row">
              <div className="col-md-12">
                <div style={{float: "right", marginRight:"15px!important"}}>
                <b className="cb-fix" style={{float: "left"}}>
                  <input
                    id="cbIsagree"
                    style={{ margin: 0 }}
                    onChange={this.onChange.bind(this, "ISAGREE")}
                    type="checkbox"
                  />{" "}
                </b>
                <h5>
                  
                  <b className="highlight" title={this.props.strings.desc}>{this.props.strings.commitment}</b>
                </h5>
                </div>
              </div>
              </div> */}
          </div>
          
          {/* <div className="col-md-12 row">
            
              <div className="col-md-3">
                <h5 className="highlight">
                  <b>{this.props.strings.signscan}</b>
                </h5>
              </div>
           
            <div className="col-md-3">
            <div className="previewComponent">
                <FileInput
                  className="btn btn-primary"
                  id="btnSignImg"
                  onChange={this._handleSIGNIMGChange}
                />

                <div className="imgPreview">{$SIGNIMGPreview}</div>
              </div>
            </div>
          </div>
          <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.idscanfront}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <div className="previewComponent">
                <FileInput
                  className="btn btn-primary"
                  id="btnOwnLicenseImg"
                  onChange={this._handleOWNLICENSEIMGChange}
                />

                <div className="imgPreview">{$OWNLICENSEIMGPreview}</div>
              </div>
            </div>
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.idscanback}</b>
              </h5>
            </div>
            <div className="col-md-3">
            <div className="previewComponent">
                <FileInput
                  className="btn btn-primary"
                  id="btnOwnLicense2Img"
                  onChange={this._handleOWNLICENSE2IMGChange}
                />

                <div className="imgPreview">{$OWNLICENSE2IMGPreview}</div>
              </div>
            </div>
          </div>
          {this.state.generalInformation["COUNTRY"] !== COUNTRY_234 && (
            <div className="col-md-12 row">
              <div className="col-md-3">
                <h5 className="highlight">
                  <b>{this.props.strings.tradingcodescan}</b>
                </h5>
              </div>
              <div className="col-md-3">
              <div className="previewComponent">
                  <FileInput
                    className="btn btn-primary"
                    id="btnOwnLicense3Img"
                    onChange={this._handleOWNLICENSE3IMGChange}
                  />

                  <div className="imgPreview">{$OWNLICENSE3IMGPreview}</div>
                </div>
              </div>
              <div className="col-md-3">
                <h5 className="highlight">
                  <b>{this.props.strings.tknhscan}</b>
                </h5>
              </div>
              <div className="col-md-3">
              <div className="previewComponent">
                  <FileInput
                    className="btn btn-primary"
                    id="btnOwnLicense4Img"
                    onChange={this._handleOWNLICENSE4IMGChange}
                  />

                  <div className="imgPreview">{$OWNLICENSE4IMGPreview}</div>
                </div>
              </div>
            </div>
          )} */}
          
          {/* <div className="col-md-12 row">
            <div className="col-md-3">
              <h5 className="highlight">
                <b>{this.props.strings.receiverptype}</b>
              </h5>
            </div>
            <div className="col-md-3">
              <h5>
                <input
                  style={{ margin: 0 }}
                  id="cbIsemail"
                  onChange={this.onChange.bind(this, "RCV_EMAIL")}
                  type="checkbox"
                />{" "}
                {this.props.strings.email}
              </h5>
            </div>
            <div className="col-md-3">
              <h5>
                <input
                  style={{ margin: 0 }}
                  id="cbIssms"
                  onChange={this.onChange.bind(this, "RCV_SMS")}
                  type="checkbox"
                />{" "}
                {this.props.strings.sms}
              </h5>
            </div>
            <div className="col-md-3">
              <h5>
                <input
                  style={{ margin: 0 }}
                  id="cbIsmanual"
                  onChange={this.onChange.bind(this, "RCV_MAIL")}
                  type="checkbox"
                />{" "}
                {this.props.strings.letter}
              </h5>
            </div>
          </div> */}
          
        </div>
        <div className="col-md-12 row">
          <div className="pull-left" style={{ display: displayExport }}>
            <button
              onClick={this.export.bind(this, "openExport")}
              disabled={this.state.disablebuttonopenExport}
              id="btnSubmitExport"
              type="button"
              className="btn btn-primary"
            >
              {this.props.strings.createxportopenExport}
            </button>
            <button
              onClick={this.export.bind(this, "onlineExport")}
              disabled={this.state.disablebuttononlineExport}
              id="btnSubmitExport2"
              type="button"
              className="btn btn-primary"
              style={{ marginLeft: 10, display: ISONLINE ==  'Y' ? "" : "none" }}
            >
              {this.props.strings.createxportonlineExport}
            </button>
            {/* <button
              onClick={this.export.bind(this, "editExport")}
              disabled={this.state.disablebuttoneditExport}
              id="btnSubmitExport1"
              type="button"
              className="btn btn-info"
              style={{ marginLeft: 10 }}
            >
              {this.props.strings.createxporteditExport}
            </button> */}
          </div>
          {/* {!ISCUSTOMER ? */}
          <div className="pull-right" >
            <input
              id="btnSubmit"
              type="button"
              onClick={this.onSubmit.bind(this)}
              className="btn btn-primary"
              style={{ marginRight: 15 }}
              value={this.props.strings.next}
            />
          </div>
          {/* :null} */}
        </div>
      </div>
    );
  }
}

const stateToProps = state => ({
  language: state.language.language,
  auth: state.auth,
  tradingdate: state.systemdate.tradingdate
});

const decorators = flow([connect(stateToProps), translate("GeneralInfo_Main")]);

module.exports = decorators(GeneralInfo_Main);
